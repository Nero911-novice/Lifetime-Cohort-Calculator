import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import logging
from typing import Tuple, Optional, Dict, Any, List
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
import requests
import re
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üìà Lifetime & LTV Calculator",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .sheets-card {
        background: linear-gradient(135deg, #4285f4 0%, #34a853 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class LifetimeCalculator:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Lifetime, LTV –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫."""
    
    def __init__(self):
        self.retention_keywords = ['retention', '%', 'ret', '—É–¥–µ—Ä–∂–∞–Ω', '–æ—Å—Ç–∞–ª', '–ø—Ä–æ—Ü–µ–Ω—Ç']
    
    @st.cache_data
    def load_from_google_sheets(_self, sheet_url: str, sheet_name: Optional[str] = None) -> Tuple[pd.DataFrame, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Sheets –ø–æ —Å—Å—ã–ª–∫–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
            if 'docs.google.com/spreadsheets' not in sheet_url:
                return pd.DataFrame(), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL
            sheet_id_match = re.search(r'/d/([a-zA-Z0-9-_]+)', sheet_url)
            if not sheet_id_match:
                return pd.DataFrame(), "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Å—ã–ª–∫–∏"
            
            sheet_id = sheet_id_match.group(1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
            if sheet_name:
                csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={sheet_name}"
            else:
                csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            response = requests.get(csv_url, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º CSV
            from io import StringIO
            df = pd.read_csv(StringIO(response.text))
            
            if df.empty:
                return pd.DataFrame(), "Google Sheets –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            return df, "success"
            
        except requests.RequestException as e:
            return pd.DataFrame(), f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {str(e)}"
        except Exception as e:
            return pd.DataFrame(), f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
    
    @st.cache_data
    def read_file(_self, file_data) -> Tuple[pd.DataFrame, str]:
        """–ß–∏—Ç–∞–µ—Ç CSV –∏–ª–∏ Excel —Ñ–∞–π–ª —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ uploaded file
            if file_data.name.lower().endswith(('.xlsx', '.xls')):
                df = pd.read_excel(file_data)
                return df, "success"
            
            # –î–ª—è CSV –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            encodings = ['utf-8', 'utf-8-sig', 'cp1251', 'windows-1251']
            separators = [',', ';', '\t']
            
            for encoding in encodings:
                for sep in separators:
                    try:
                        file_data.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
                        df = pd.read_csv(file_data, encoding=encoding, sep=sep)
                        if len(df.columns) >= 2 and len(df) > 0:
                            return df, "success"
                    except Exception:
                        continue
            
            return pd.DataFrame(), "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É."
        
        except Exception as e:
            return pd.DataFrame(), f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
    
    def find_retention_column(self, df: pd.DataFrame, col_name: Optional[str] = None) -> Tuple[str, str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–ª–æ–Ω–∫—É —Å retention –¥–∞–Ω–Ω—ã–º–∏."""
        if col_name and col_name in df.columns:
            return col_name, "success"
        
        # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        candidates = []
        for col in df.columns:
            col_lower = str(col).lower()
            if any(keyword in col_lower for keyword in self.retention_keywords):
                candidates.append(col)
        
        if candidates:
            return candidates[0], "success"
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
        if numeric_cols:
            return numeric_cols[0], f"warning: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '{numeric_cols[0]}'"
        
        return "", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫"
    
    def validate_retention_data(self, retention_series: pd.Series) -> Tuple[pd.Series, str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ retention."""
        try:
            retention = retention_series.copy().fillna(0)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø
            if retention.dtype not in [np.float64, np.int64]:
                retention = pd.to_numeric(retention, errors='coerce').fillna(0)
            
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–µ 1, —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            if retention.max() > 1:
                retention = retention / 100.0
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if retention.max() > 1.5:
                return pd.Series(), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è retention (> 150%)"
            
            if len(retention[retention > 0]) == 0:
                return pd.Series(), "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è retention —Ä–∞–≤–Ω—ã –Ω—É–ª—é"
            
            return retention, "success"
        
        except Exception as e:
            return pd.Series(), f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
    
    def calculate_metrics(self, retention: pd.Series, arppu: float, cac: float) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            lifetime = retention.sum()
            ltv = arppu * lifetime
            ltv_cac = ltv / cac if cac > 0 else np.inf
            roi_percent = (ltv_cac - 1) * 100
            
            # –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            cumulative_retention = retention.cumsum()
            cumulative_ltv = arppu * cumulative_retention
            
            # –ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
            payback_period = None
            for i, cum_ltv in enumerate(cumulative_ltv):
                if cum_ltv >= cac:
                    payback_period = i + 1
                    break
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            monthly_ltv = arppu * retention
            churn_rates = 1 - (retention / retention.shift(1).fillna(1))
            churn_rates = churn_rates.fillna(0)
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã (–ø—Ä–æ—Å—Ç–∞—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è)
            if len(retention) >= 3:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–±—ã–≤–∞—é—â—É—é —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                last_periods = retention.tail(3)
                decay_rate = (last_periods.iloc[-1] / last_periods.iloc[0]) ** (1/2)
                
                future_retention = []
                last_value = retention.iloc[-1]
                for i in range(12):  # –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä–µ–¥
                    last_value *= decay_rate
                    future_retention.append(max(last_value, 0.001))  # –º–∏–Ω–∏–º—É–º 0.1%
                
                future_retention = pd.Series(future_retention)
                extended_lifetime = lifetime + future_retention.sum()
                extended_ltv = arppu * extended_lifetime
            else:
                future_retention = pd.Series()
                extended_lifetime = lifetime
                extended_ltv = ltv
            
            return {
                'lifetime': lifetime,
                'ltv': ltv,
                'ltv_cac': ltv_cac,
                'roi_percent': roi_percent,
                'payback_period': payback_period,
                'cumulative_ltv': cumulative_ltv,
                'monthly_ltv': monthly_ltv,
                'churn_rates': churn_rates,
                'retention': retention,
                'future_retention': future_retention,
                'extended_lifetime': extended_lifetime,
                'extended_ltv': extended_ltv,
                'status': 'success'
            }
        
        except Exception as e:
            return {'status': f'–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}'}
    
    def create_sensitivity_analysis(self, ltv: float, base_cac: float, base_arppu: float) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        try:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ CAC
            cac_range = np.linspace(max(1, base_cac * 0.5), base_cac * 2, 15)
            # –ê–Ω–∞–ª–∏–∑ –ø–æ ARPPU
            arppu_range = np.linspace(max(1, base_arppu * 0.7), base_arppu * 1.5, 15)
            
            sensitivity_data = []
            
            # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ CAC
            for cac in cac_range:
                ltv_cac_ratio = ltv / cac
                sensitivity_data.append({
                    '–ü–∞—Ä–∞–º–µ—Ç—Ä': 'CAC',
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': int(cac),
                    'LTV/CAC': round(ltv_cac_ratio, 2),
                    'ROI %': round((ltv_cac_ratio - 1) * 100, 1),
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–∏–±—ã–ª—å–Ω–æ' if ltv_cac_ratio > 1 else '–£–±—ã—Ç–æ—á–Ω–æ',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã %': round((cac / base_cac - 1) * 100, 1)
                })
            
            # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ ARPPU
            lifetime = ltv / base_arppu  # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º lifetime
            for arppu in arppu_range:
                new_ltv = arppu * lifetime
                ltv_cac_ratio = new_ltv / base_cac
                sensitivity_data.append({
                    '–ü–∞—Ä–∞–º–µ—Ç—Ä': 'ARPPU',
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': int(arppu),
                    'LTV/CAC': round(ltv_cac_ratio, 2),
                    'ROI %': round((ltv_cac_ratio - 1) * 100, 1),
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–∏–±—ã–ª—å–Ω–æ' if ltv_cac_ratio > 1 else '–£–±—ã—Ç–æ—á–Ω–æ',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã %': round((arppu / base_arppu - 1) * 100, 1)
                })
            
            return pd.DataFrame(sensitivity_data)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
            return pd.DataFrame()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
@st.cache_resource
def get_calculator():
    return LifetimeCalculator()

calculator = get_calculator()

def create_advanced_plotly_charts(metrics: Dict) -> Tuple[Any, Any, Any, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å Plotly."""
    retention = metrics['retention']
    cumulative_ltv = metrics['cumulative_ltv']
    monthly_ltv = metrics['monthly_ltv']
    
    months = list(range(1, len(retention) + 1))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: Retention –∫—Ä–∏–≤–∞—è —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    fig_retention = go.Figure()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è retention
    fig_retention.add_trace(go.Scatter(
        x=months, 
        y=retention,
        mode='lines+markers',
        name='Retention (—Ñ–∞–∫—Ç)',
        line=dict(color='#667eea', width=3),
        marker=dict(size=8),
        hovertemplate='–ú–µ—Å—è—Ü %{x}<br>Retention: %{y:.2%}<extra></extra>'
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
    if len(metrics['future_retention']) > 0:
        future_months = list(range(len(retention) + 1, len(retention) + len(metrics['future_retention']) + 1))
        fig_retention.add_trace(go.Scatter(
            x=future_months,
            y=metrics['future_retention'],
            mode='lines+markers',
            name='–ü—Ä–æ–≥–Ω–æ–∑ retention',
            line=dict(color='#ff7f0e', width=2, dash='dash'),
            marker=dict(size=6),
            hovertemplate='–ú–µ—Å—è—Ü %{x}<br>–ü—Ä–æ–≥–Ω–æ–∑: %{y:.2%}<extra></extra>'
        ))
    
    fig_retention.update_layout(
        title="–ö—Ä–∏–≤–∞—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="Retention",
        hovermode='x unified',
        yaxis=dict(tickformat='.1%')
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LTV —Å –∑–æ–Ω–∞–º–∏
    fig_ltv = go.Figure()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è LTV
    fig_ltv.add_trace(go.Scatter(
        x=months,
        y=cumulative_ltv,
        mode='lines+markers',
        name='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π LTV',
        line=dict(color='#2ca02c', width=3),
        marker=dict(size=8),
        fill='tonexty',
        hovertemplate='–ú–µ—Å—è—Ü %{x}<br>LTV: %{y:,.0f} ‚ÇΩ<extra></extra>'
    ))
    
    # –õ–∏–Ω–∏—è CAC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if 'ltv_cac' in metrics and metrics['ltv_cac'] > 0:
        cac_line = [metrics['ltv'] / metrics['ltv_cac']] * len(months)
        fig_ltv.add_trace(go.Scatter(
            x=months,
            y=cac_line,
            mode='lines',
            name='CAC',
            line=dict(color='red', width=2, dash='dot'),
            hovertemplate='CAC: %{y:,.0f} ‚ÇΩ<extra></extra>'
        ))
    
    fig_ltv.update_layout(
        title="–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ LTV vs CAC",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="LTV (—Ä—É–±.)",
        hovermode='x unified'
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ú–µ—Å—è—á–Ω—ã–π LTV —Å —Ç—Ä–µ–Ω–¥–æ–º
    fig_monthly = go.Figure()
    
    fig_monthly.add_trace(go.Bar(
        x=months,
        y=monthly_ltv,
        name='–ú–µ—Å—è—á–Ω—ã–π LTV',
        marker_color='#764ba2',
        hovertemplate='–ú–µ—Å—è—Ü %{x}<br>LTV: %{y:,.0f} ‚ÇΩ<extra></extra>'
    ))
    
    # –¢—Ä–µ–Ω–¥ –ª–∏–Ω–∏—è
    if len(monthly_ltv) > 3:
        z = np.polyfit(months, monthly_ltv, 1)
        p = np.poly1d(z)
        fig_monthly.add_trace(go.Scatter(
            x=months,
            y=p(months),
            mode='lines',
            name='–¢—Ä–µ–Ω–¥',
            line=dict(color='red', width=2),
            hovertemplate='–¢—Ä–µ–Ω–¥: %{y:,.0f} ‚ÇΩ<extra></extra>'
        ))
    
    fig_monthly.update_layout(
        title="–ú–µ—Å—è—á–Ω—ã–π –≤–∫–ª–∞–¥ –≤ LTV —Å —Ç—Ä–µ–Ω–¥–æ–º",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="LTV –∑–∞ –º–µ—Å—è—Ü (—Ä—É–±.)",
        hovermode='x unified'
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    fig_sensitivity = create_sensitivity_heatmap(metrics)
    
    return fig_retention, fig_ltv, fig_monthly, fig_sensitivity

def create_sensitivity_heatmap(metrics: Dict) -> go.Figure:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LTV/CAC."""
    try:
        base_ltv = metrics['ltv']
        base_cac = base_ltv / metrics['ltv_cac'] if metrics['ltv_cac'] > 0 else 100
        
        # –î–∏–∞–ø–∞–∑–æ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
        cac_changes = np.linspace(0.5, 2.0, 10)
        arppu_changes = np.linspace(0.7, 1.5, 10)
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ LTV/CAC
        ltv_cac_matrix = []
        for arppu_change in arppu_changes:
            row = []
            for cac_change in cac_changes:
                new_ltv = base_ltv * arppu_change
                new_cac = base_cac * cac_change
                ltv_cac_ratio = new_ltv / new_cac if new_cac > 0 else 0
                row.append(ltv_cac_ratio)
            ltv_cac_matrix.append(row)
        
        fig = go.Figure(data=go.Heatmap(
            z=ltv_cac_matrix,
            x=[f"{c:.1f}x" for c in cac_changes],
            y=[f"{a:.1f}x" for a in arppu_changes],
            colorscale='RdYlGn',
            colorbar=dict(title="LTV/CAC"),
            hovertemplate='CAC: %{x}<br>ARPPU: %{y}<br>LTV/CAC: %{z:.2f}<extra></extra>'
        ))
        
        fig.update_layout(
            title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LTV/CAC",
            xaxis_title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ CAC",
            yaxis_title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ ARPPU"
        )
        
        return fig
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {str(e)}")
        return go.Figure()

def export_results_to_excel_advanced(metrics: Dict, sensitivity_df: pd.DataFrame, insights: List[Dict] = None) -> bytes:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏."""
    output = BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        main_metrics = pd.DataFrame({
            '–ú–µ—Ç—Ä–∏–∫–∞': ['Lifetime (–º–µ—Å)', 'LTV (—Ä—É–±)', 'LTV/CAC', 'ROI (%)', '–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ (–º–µ—Å)', '–ü—Ä–æ–≥–Ω–æ–∑ LTV (—Ä—É–±)'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                round(metrics['lifetime'], 2),
                round(metrics['ltv'], 0),
                round(metrics['ltv_cac'], 2),
                round(metrics['roi_percent'], 1),
                metrics['payback_period'] or '–ù–µ –æ–∫—É–ø–∞–µ—Ç—Å—è',
                round(metrics.get('extended_ltv', metrics['ltv']), 0)
            ]
        })
        main_metrics.to_excel(writer, sheet_name='–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏', index=False)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_data = pd.DataFrame({
            '–ú–µ—Å—è—Ü': range(1, len(metrics['retention']) + 1),
            'Retention': metrics['retention'].round(4),
            '–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π LTV': metrics['cumulative_ltv'].round(0),
            '–ú–µ—Å—è—á–Ω—ã–π LTV': metrics['monthly_ltv'].round(0),
            'Churn Rate': metrics['churn_rates'].round(4)
        })
        monthly_data.to_excel(writer, sheet_name='–ü–æ–º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', index=False)
        
        # –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if not sensitivity_df.empty:
            sensitivity_df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', index=False)
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        if len(metrics.get('future_retention', [])) > 0:
            forecast_data = pd.DataFrame({
                '–ú–µ—Å—è—Ü': range(len(metrics['retention']) + 1, len(metrics['retention']) + len(metrics['future_retention']) + 1),
                '–ü—Ä–æ–≥–Ω–æ–∑ Retention': metrics['future_retention'].round(4),
                '–ü—Ä–æ–≥–Ω–æ–∑ –º–µ—Å—è—á–Ω–æ–≥–æ LTV': (metrics['future_retention'] * (metrics['ltv'] / metrics['lifetime'])).round(0)
            })
            forecast_data.to_excel(writer, sheet_name='–ü—Ä–æ–≥–Ω–æ–∑', index=False)
        
        # –ò–Ω—Å–∞–π—Ç—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
        if insights:
            insights_df = pd.DataFrame([
                {
                    '–¢–∏–ø': insight.get('type', 'info'),
                    '–ó–∞–≥–æ–ª–æ–≤–æ–∫': insight.get('title', ''),
                    '–û–ø–∏—Å–∞–Ω–∏–µ': insight.get('description', ''),
                    '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è': insight.get('recommendation', '')
                }
                for insight in insights
            ])
            insights_df.to_excel(writer, sheet_name='–ò–Ω—Å–∞–π—Ç—ã', index=False)
        
        # –°–≤–æ–¥–∫–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
        summary_data = pd.DataFrame({
            '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
                '–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞',
                '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞',
                '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞',
                '–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏',
                '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'
            ],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                f"{metrics['lifetime']:.1f} –º–µ—Å—è—Ü–µ–≤",
                f"{metrics['ltv']:,.0f} —Ä—É–±–ª–µ–π",
                f"{metrics['ltv_cac']:.1f}x –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
                "–ü—Ä–∏–±—ã–ª—å–Ω–∞—è" if metrics['ltv_cac'] > 1 else "–£–±—ã—Ç–æ—á–Ω–∞—è",
                "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å" if metrics['ltv_cac'] > 3 else "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å" if metrics['ltv_cac'] > 1 else "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
            ]
        })
        summary_data.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞', index=False)
    
    return output.getvalue()

def render_data_source_selector() -> Tuple[Optional[pd.DataFrame], str]:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    
    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_source = st.selectbox(
        "üìä –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
        ["üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "üîó Google Sheets", "üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥"]
    )
    
    df = None
    source_info = ""
    
    if data_source == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å retention –¥–∞–Ω–Ω—ã–º–∏",
            type=['csv', 'xlsx', 'xls']
        )
        
        if uploaded_file:
            df, status = calculator.read_file(uploaded_file)
            if status == "success":
                st.success("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                source_info = f"–§–∞–π–ª: {uploaded_file.name}"
            else:
                st.error(f"‚ùå {status}")
    
    elif data_source == "üîó Google Sheets":
        st.markdown("""
        <div class="sheets-card">
            <h4>üîó –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Google Sheets</h4>
            <p>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google –¢–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ retention</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            sheets_url = st.text_input(
                "–°—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets:",
                placeholder="https://docs.google.com/spreadsheets/d/1ABC123.../edit"
            )
        
        with col2:
            sheet_name = st.text_input(
                "–õ–∏—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
                placeholder="–õ–∏—Å—Ç1"
            )
        
        if sheets_url:
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets..."):
                        df, status = calculator.load_from_google_sheets(sheets_url, sheet_name or None)
                        
                        if status == "success":
                            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google Sheets!")
                            source_info = f"Google Sheets: {sheet_name or '–ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç'}"
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            st.session_state['sheets_data'] = df
                            st.session_state['sheets_url'] = sheets_url
                            st.session_state['sheets_name'] = sheet_name
                        else:
                            st.error(f"‚ùå {status}")
            
            with col2:
                if 'sheets_data' in st.session_state and st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                    with st.spinner("–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                        df, status = calculator.load_from_google_sheets(
                            st.session_state['sheets_url'], 
                            st.session_state.get('sheets_name')
                        )
                        if status == "success":
                            st.session_state['sheets_data'] = df
                            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                        else:
                            st.error(f"‚ùå {status}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'sheets_data' in st.session_state:
            df = st.session_state['sheets_data']
            source_info = f"Google Sheets: {st.session_state.get('sheets_name', '–ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç')}"
    
    elif data_source == "üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥":
        st.subheader("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ retention")
        
        num_months = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤:", 6, 36, 12)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        cols_per_row = 4
        retention_values = []
        
        for row in range((num_months + cols_per_row - 1) // cols_per_row):
            cols = st.columns(cols_per_row)
            
            for col_idx in range(cols_per_row):
                month_idx = row * cols_per_row + col_idx
                if month_idx < num_months:
                    with cols[col_idx]:
                        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —É–±—ã–≤–∞–Ω–∏–µ–º
                        default_value = max(1.0, 100 * (0.5 ** (month_idx/6)))
                        
                        value = st.number_input(
                            f"–ú–µ—Å—è—Ü {month_idx + 1}:",
                            min_value=0.0,
                            max_value=100.0,
                            value=default_value,
                            step=0.1,
                            key=f"retention_{month_idx}"
                        )
                        retention_values.append(value)
        
        if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", type="primary"):
            df = pd.DataFrame({
                '–ú–µ—Å—è—Ü': range(1, num_months + 1),
                'Retention %': retention_values
            })
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤—Ä—É—á–Ω—É—é!")
            source_info = f"–†—É—á–Ω–æ–π –≤–≤–æ–¥: {num_months} –º–µ—Å—è—Ü–µ–≤"
    
    return df, source_info

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üìà Lifetime & LTV Calculator</h1>', unsafe_allow_html=True)
    st.markdown("**–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–≥–æ—Ä—Ç–Ω–æ–π retention –∏ —Ä–∞—Å—á–µ—Ç–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫**")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ì–∏–±–∫–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        df, source_info = render_data_source_selector()
        
        if df is not None and not df.empty:
            st.success(f"üìä **–ò—Å—Ç–æ—á–Ω–∏–∫**: {source_info}")
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
            with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
                st.dataframe(df.head(10))
                st.info(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏
            retention_col = st.selectbox(
                "üìä –ö–æ–ª–æ–Ω–∫–∞ —Å retention –¥–∞–Ω–Ω—ã–º–∏",
                ["–ê–≤—Ç–æ–ø–æ–∏—Å–∫"] + list(df.columns),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è"
            )
            
            if retention_col == "–ê–≤—Ç–æ–ø–æ–∏—Å–∫":
                retention_col = None
        else:
            st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            st.markdown("### üìã –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:")
            example_data = pd.DataFrame({
                '–ú–µ—Å—è—Ü': range(1, 13),
                '% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞': [100, 51.7, 42.4, 36.8, 32.1, 28.9, 26.4, 24.3, 22.6, 21.1, 19.8, 18.7]
            })
            st.dataframe(example_data)
            return
        
        st.markdown("---")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∏–∑–Ω–µ—Å–∞
        st.subheader("üíº –ë–∏–∑–Ω–µ—Å-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        col1, col2 = st.columns(2)
        with col1:
            arppu = st.number_input(
                "ARPPU (—Ä—É–±.)",
                min_value=0.01,
                value=71.0,
                step=1.0,
                help="–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        
        with col2:
            cac = st.number_input(
                "CAC (—Ä—É–±.)",
                min_value=0.01,
                value=184.0,
                step=1.0,
                help="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.markdown("---")
        st.subheader("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        show_forecast = st.checkbox("üìà –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", value=True)
        show_sensitivity = st.checkbox("üéØ –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", value=True)
        show_heatmap = st.checkbox("üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞", value=True)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        calculate_button = st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏", type="primary", use_container_width=True)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if df is not None and not df.empty and calculate_button:
        with st.spinner("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã..."):
            # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ retention
            col_name, col_status = calculator.find_retention_column(df, retention_col)
            
            if not col_name:
                st.error(f"‚ùå {col_status}")
                st.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns)}")
                return
            
            if col_status.startswith("warning"):
                st.warning(f"‚ö†Ô∏è {col_status}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            retention_data, validation_status = calculator.validate_retention_data(df[col_name])
            
            if validation_status != "success":
                st.error(f"‚ùå {validation_status}")
                return
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = calculator.calculate_metrics(retention_data, arppu, cac)
            
            if metrics['status'] != 'success':
                st.error(f"‚ùå {metrics['status']}")
                return
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.success("‚úÖ –†–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        st.markdown("## üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "‚è±Ô∏è Lifetime",
                f"{metrics['lifetime']:.2f} –º–µ—Å",
                help="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"
            )
        
        with col2:
            delta_text = None
            if show_forecast and 'extended_ltv' in metrics:
                delta = metrics['extended_ltv'] - metrics['ltv']
                delta_text = f"{delta:,.0f} ‚ÇΩ –ø—Ä–æ–≥–Ω–æ–∑"
            
            st.metric(
                "üíé LTV",
                f"{metrics['ltv']:,.0f} ‚ÇΩ",
                delta=delta_text,
                help="–û–±—â–∏–π –¥–æ—Ö–æ–¥ —Å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
            )
        
        with col3:
            st.metric(
                "üìà LTV/CAC",
                f"{metrics['ltv_cac']:.2f}",
                delta=f"{metrics['roi_percent']:+.1f}% ROI",
                help="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∫ –∑–∞—Ç—Ä–∞—Ç–∞–º –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ"
            )
        
        with col4:
            payback_text = f"{metrics['payback_period']} –º–µ—Å" if metrics['payback_period'] else "–ù–µ –æ–∫—É–ø–∞–µ—Ç—Å—è"
            st.metric(
                "üí∞ –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å",
                payback_text,
                help="–í—Ä–µ–º—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"
            )
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.markdown("## üéØ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if metrics['ltv_cac'] < 1:
            st.error("üî¥ **–£–±—ã—Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å**: LTV < CAC. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ ARPPU.")
        elif metrics['ltv_cac'] < 2:
            st.warning("üü° **–û–∫—É–ø–∞–µ—Ç—Å—è, –Ω–æ –µ—Å—Ç—å —Ä–∏—Å–∫–∏**: LTV/CAC < 2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ retention –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–µ CAC.")
        elif metrics['ltv_cac'] < 3:
            st.info("üîµ **–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å**: LTV/CAC = 2-3. –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–æ—Å—Ç–∞.")
        else:
            st.success("üü¢ **–û—Ç–ª–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å**: LTV/CAC > 3. –ú–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤!")
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        st.markdown("## üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        
        fig_retention, fig_ltv, fig_monthly, fig_sensitivity = create_advanced_plotly_charts(metrics)
        
        if show_heatmap:
            tab1, tab2, tab3, tab4 = st.tabs(["üìâ Retention", "üìà LTV Growth", "üìä Monthly LTV", "üî• Heatmap"])
        else:
            tab1, tab2, tab3 = st.tabs(["üìâ Retention", "üìà LTV Growth", "üìä Monthly LTV"])
        
        with tab1:
            st.plotly_chart(fig_retention, use_container_width=True)
        
        with tab2:
            st.plotly_chart(fig_ltv, use_container_width=True)
        
        with tab3:
            st.plotly_chart(fig_monthly, use_container_width=True)
        
        if show_heatmap:
            with tab4:
                st.plotly_chart(fig_sensitivity, use_container_width=True)
                st.markdown("""
                **üí° –ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É:**
                - **–ó–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã** ‚Äî –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (LTV/CAC > 1)
                - **–ö—Ä–∞—Å–Ω—ã–µ –∑–æ–Ω—ã** ‚Äî —É–±—ã—Ç–æ—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (LTV/CAC < 1)
                - **–ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏** ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ CAC (—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è)
                - **–ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏** ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ ARPPU (–¥–æ—Ö–æ–¥–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞)
                """)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        st.markdown("## üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        detailed_data = pd.DataFrame({
            '–ú–µ—Å—è—Ü': range(1, len(metrics['retention']) + 1),
            'Retention %': (metrics['retention'] * 100).round(2),
            '–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π LTV': metrics['cumulative_ltv'].round(0),
            '–ú–µ—Å—è—á–Ω—ã–π LTV': metrics['monthly_ltv'].round(0),
            'Churn Rate %': (metrics['churn_rates'] * 100).round(2)
        })
        
        st.dataframe(detailed_data, use_container_width=True)
        
        # –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if show_sensitivity:
            st.markdown("## üéØ –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            sensitivity_df = calculator.create_sensitivity_analysis(metrics['ltv'], cac, arppu)
            
            if not sensitivity_df.empty:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üìä –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ CAC")
                    cac_data = sensitivity_df[sensitivity_df['–ü–∞—Ä–∞–º–µ—Ç—Ä'] == 'CAC']
                    st.dataframe(cac_data, use_container_width=True)
                
                with col2:
                    st.subheader("üìä –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ ARPPU")
                    arppu_data = sensitivity_df[sensitivity_df['–ü–∞—Ä–∞–º–µ—Ç—Ä'] == 'ARPPU']
                    st.dataframe(arppu_data, use_container_width=True)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.markdown("## üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Excel —ç–∫—Å–ø–æ—Ä—Ç
            excel_data = export_results_to_excel_advanced(
                metrics, 
                sensitivity_df if show_sensitivity else pd.DataFrame()
            )
            
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (Excel)",
                data=excel_data,
                file_name=f"ltv_analysis_full_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        with col2:
            # JSON —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
            json_data = {
                'timestamp': datetime.now().isoformat(),
                'source': source_info,
                'parameters': {
                    'arppu': arppu,
                    'cac': cac
                },
                'metrics': {
                    'lifetime': float(metrics['lifetime']),
                    'ltv': float(metrics['ltv']),
                    'ltv_cac': float(metrics['ltv_cac']),
                    'roi_percent': float(metrics['roi_percent']),
                    'payback_period': metrics['payback_period']
                },
                'retention_data': metrics['retention'].tolist(),
                'forecast': metrics['future_retention'].tolist() if len(metrics['future_retention']) > 0 else []
            }
            
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (JSON)",
                data=json.dumps(json_data, ensure_ascii=False, indent=2),
                file_name=f"ltv_data_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                mime="application/json"
            )
    
    # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏"):
        st.markdown("""
        ### üìñ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
        
        - **Lifetime** ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ (—Å—É–º–º–∞ retention –ø–æ –º–µ—Å—è—Ü–∞–º)
        - **LTV** (Lifetime Value) ‚Äî –æ–±—â–∏–π –¥–æ—Ö–æ–¥ —Å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –∂–∏–∑–Ω–∏
        - **CAC** (Customer Acquisition Cost) ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        - **ARPPU** (Average Revenue Per Paying User) ‚Äî —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –ø–ª–∞—Ç—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - **Retention** ‚Äî –¥–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        ### üßÆ –§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞
        
        ```
        Lifetime = Œ£(Retention –ø–æ –º–µ—Å—è—Ü–∞–º)
        LTV = ARPPU √ó Lifetime
        LTV/CAC = LTV √∑ CAC
        ROI = (LTV/CAC - 1) √ó 100%
        ```
        
        ### üéØ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è LTV/CAC
        
        - **< 1.0** ‚Äî –£–±—ã—Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å (—Ç—Ä–∞—Ç–∏–º –±–æ–ª—å—à–µ, —á–µ–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º)
        - **1.0-2.0** ‚Äî –û–∫—É–ø–∞–µ—Ç—Å—è, –Ω–æ –µ—Å—Ç—å —Ä–∏—Å–∫–∏
        - **2.0-3.0** ‚Äî –ó–¥–æ—Ä–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–æ—Å—Ç–∞
        - **> 3.0** ‚Äî –û—Ç–ª–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        
        ### üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        **üìÅ –§–∞–π–ª—ã**: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è CSV –∏ Excel —Ñ–∞–π–ª—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        
        **üîó Google Sheets**: –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ
        - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç–∫—Ä—ã—Ç
        - –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        
        **üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥**: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö retention –ø–æ –º–µ—Å—è—Ü–∞–º
        
        ### üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ ARPPU –∏ CAC –≤–ª–∏—è—é—Ç –Ω–∞ LTV/CAC:
        - **–ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç** ‚Äî –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        - **–ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç** ‚Äî —É–±—ã—Ç–æ—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        - –ü–æ–º–æ–≥–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–æ—Å—Ç–∞
        
        ### üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        
        **–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è LTV:**
        - –£–ª—É—á—à–µ–Ω–∏–µ retention (–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ —Ñ–∏—á–∏, engagement)
        - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ ARPPU (upsell, cross-sell, —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ)
        
        **–î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è CAC:**
        - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        - –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        - –†–∞–∑–≤–∏—Ç–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
        """)

if __name__ == "__main__":
    main()
