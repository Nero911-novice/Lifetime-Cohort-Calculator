import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import logging
from typing import Tuple, Optional, Dict, Any, List
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import requests
import json
import re
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import r2_score
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üìà Lifetime & LTV Calculator Pro",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .insight-card {
        border-left: 4px solid #667eea;
        padding: 1rem;
        margin: 0.5rem 0;
        background: #f8f9fe;
        border-radius: 0 10px 10px 0;
    }
    
    .benchmark-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class LifetimeCalculatorPro:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Lifetime, LTV –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å ML –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏."""
    
    def __init__(self):
        self.retention_keywords = ['retention', '%', 'ret', '—É–¥–µ—Ä–∂–∞–Ω', '–æ—Å—Ç–∞–ª', '–ø—Ä–æ—Ü–µ–Ω—Ç']
        self.industry_benchmarks = {
            'E-commerce': {
                'ltv_cac': 3.0, 
                'lifetime_months': 18, 
                'month1_retention': 0.25,
                'churn_rate': 0.15,
                'payback_months': 6
            },
            'SaaS B2B': {
                'ltv_cac': 3.5, 
                'lifetime_months': 24, 
                'month1_retention': 0.85,
                'churn_rate': 0.05,
                'payback_months': 8
            },
            'Mobile Games': {
                'ltv_cac': 1.5, 
                'lifetime_months': 8, 
                'month1_retention': 0.40,
                'churn_rate': 0.25,
                'payback_months': 3
            },
            '–§–∏–Ω—Ç–µ—Ö': {
                'ltv_cac': 4.0, 
                'lifetime_months': 30, 
                'month1_retention': 0.70,
                'churn_rate': 0.08,
                'payback_months': 10
            },
            'EdTech': {
                'ltv_cac': 2.8, 
                'lifetime_months': 15, 
                'month1_retention': 0.60,
                'churn_rate': 0.12,
                'payback_months': 5
            },
            'Delivery': {
                'ltv_cac': 2.2, 
                'lifetime_months': 12, 
                'month1_retention': 0.35,
                'churn_rate': 0.20,
                'payback_months': 4
            }
        }
    
    @st.cache_data
    def load_from_google_sheets(_self, sheet_url: str, sheet_name: Optional[str] = None) -> Tuple[pd.DataFrame, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Google Sheets –ø–æ —Å—Å—ã–ª–∫–µ."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
            if 'docs.google.com/spreadsheets' not in sheet_url:
                return pd.DataFrame(), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL
            sheet_id_match = re.search(r'/d/([a-zA-Z0-9-_]+)', sheet_url)
            if not sheet_id_match:
                return pd.DataFrame(), "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Å—ã–ª–∫–∏"
            
            sheet_id = sheet_id_match.group(1)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
            if sheet_name:
                csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={sheet_name}"
            else:
                csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            response = requests.get(csv_url, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º CSV
            from io import StringIO
            df = pd.read_csv(StringIO(response.text))
            
            if df.empty:
                return pd.DataFrame(), "Google Sheets –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            return df, "success"
            
        except requests.RequestException as e:
            return pd.DataFrame(), f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Google Sheets: {str(e)}"
        except Exception as e:
            return pd.DataFrame(), f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
    
    @st.cache_data
    def read_file(_self, file_data) -> Tuple[pd.DataFrame, str]:
        """–ß–∏—Ç–∞–µ—Ç CSV –∏–ª–∏ Excel —Ñ–∞–π–ª —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        try:
            if file_data.name.lower().endswith(('.xlsx', '.xls')):
                df = pd.read_excel(file_data)
                return df, "success"
            
            encodings = ['utf-8', 'utf-8-sig', 'cp1251', 'windows-1251']
            separators = [',', ';', '\t']
            
            for encoding in encodings:
                for sep in separators:
                    try:
                        file_data.seek(0)
                        df = pd.read_csv(file_data, encoding=encoding, sep=sep)
                        if len(df.columns) >= 2 and len(df) > 0:
                            return df, "success"
                    except Exception:
                        continue
            
            return pd.DataFrame(), "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É."
        
        except Exception as e:
            return pd.DataFrame(), f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
    
    def find_retention_column(self, df: pd.DataFrame, col_name: Optional[str] = None) -> Tuple[str, str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–ª–æ–Ω–∫—É —Å retention –¥–∞–Ω–Ω—ã–º–∏."""
        if col_name and col_name in df.columns:
            return col_name, "success"
        
        candidates = []
        for col in df.columns:
            col_lower = str(col).lower()
            if any(keyword in col_lower for keyword in self.retention_keywords):
                candidates.append(col)
        
        if candidates:
            return candidates[0], "success"
        
        numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
        if numeric_cols:
            return numeric_cols[0], f"warning: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '{numeric_cols[0]}'"
        
        return "", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫"
    
    def validate_retention_data(self, retention_series: pd.Series) -> Tuple[pd.Series, str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ retention."""
        try:
            retention = retention_series.copy().fillna(0)
            
            if retention.dtype not in [np.float64, np.int64]:
                retention = pd.to_numeric(retention, errors='coerce').fillna(0)
            
            if retention.max() > 1:
                retention = retention / 100.0
            
            if retention.max() > 1.5:
                return pd.Series(), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è retention (> 150%)"
            
            if len(retention[retention > 0]) == 0:
                return pd.Series(), "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è retention —Ä–∞–≤–Ω—ã –Ω—É–ª—é"
            
            return retention, "success"
        
        except Exception as e:
            return pd.Series(), f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
    
    def calculate_metrics(self, retention: pd.Series, arppu: float, cac: float) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
        try:
            lifetime = retention.sum()
            ltv = arppu * lifetime
            ltv_cac = ltv / cac if cac > 0 else np.inf
            roi_percent = (ltv_cac - 1) * 100
            
            cumulative_retention = retention.cumsum()
            cumulative_ltv = arppu * cumulative_retention
            
            payback_period = None
            for i, cum_ltv in enumerate(cumulative_ltv):
                if cum_ltv >= cac:
                    payback_period = i + 1
                    break
            
            monthly_ltv = arppu * retention
            churn_rates = 1 - (retention / retention.shift(1).fillna(1))
            churn_rates = churn_rates.fillna(0)
            
            # ML –ø—Ä–æ–≥–Ω–æ–∑
            if len(retention) >= 3:
                ml_forecast = self.ml_forecast_retention(retention)
                extended_lifetime = lifetime + ml_forecast.sum()
                extended_ltv = arppu * extended_lifetime
            else:
                ml_forecast = pd.Series()
                extended_lifetime = lifetime
                extended_ltv = ltv
            
            return {
                'lifetime': lifetime,
                'ltv': ltv,
                'ltv_cac': ltv_cac,
                'roi_percent': roi_percent,
                'payback_period': payback_period,
                'cumulative_ltv': cumulative_ltv,
                'monthly_ltv': monthly_ltv,
                'churn_rates': churn_rates,
                'retention': retention,
                'ml_forecast': ml_forecast,
                'extended_lifetime': extended_lifetime,
                'extended_ltv': extended_ltv,
                'status': 'success'
            }
        
        except Exception as e:
            return {'status': f'–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}'}
    
    def ml_forecast_retention(self, retention_data: pd.Series, months_ahead: int = 12) -> pd.Series:
        """ML-–ø—Ä–æ–≥–Ω–æ–∑ retention —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏."""
        try:
            if len(retention_data) < 3:
                return pd.Series()
            
            X = np.arange(len(retention_data)).reshape(-1, 1)
            y = retention_data.values
            
            # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏
            poly_features = PolynomialFeatures(degree=min(3, len(retention_data) - 1))
            X_poly = poly_features.fit_transform(X)
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            model = LinearRegression()
            model.fit(X_poly, y)
            
            # –ü—Ä–æ–≥–Ω–æ–∑
            future_X = np.arange(len(retention_data), len(retention_data) + months_ahead).reshape(-1, 1)
            future_X_poly = poly_features.transform(future_X)
            forecast = model.predict(future_X_poly)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑—É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            min_retention = max(0.001, retention_data.iloc[-1] * 0.1)  # –º–∏–Ω–∏–º—É–º 0.1% –∏–ª–∏ 10% –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            max_retention = retention_data.iloc[-1]
            forecast = np.clip(forecast, min_retention, max_retention)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–±—ã–≤–∞–Ω–∏–µ
            decay_factor = 0.95  # –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü retention —É–±—ã–≤–∞–µ—Ç –Ω–∞ 5%
            for i in range(1, len(forecast)):
                forecast[i] = min(forecast[i], forecast[i-1] * decay_factor)
            
            return pd.Series(forecast, name='ML_Forecast')
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ ML –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
            return pd.Series()
    
    def create_sensitivity_analysis(self, ltv: float, base_cac: float, base_arppu: float) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        try:
            cac_range = np.linspace(max(1, base_cac * 0.5), base_cac * 2, 15)
            arppu_range = np.linspace(max(1, base_arppu * 0.7), base_arppu * 1.5, 15)
            
            sensitivity_data = []
            
            for cac in cac_range:
                ltv_cac_ratio = ltv / cac
                sensitivity_data.append({
                    '–ü–∞—Ä–∞–º–µ—Ç—Ä': 'CAC',
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': int(cac),
                    'LTV/CAC': round(ltv_cac_ratio, 2),
                    'ROI %': round((ltv_cac_ratio - 1) * 100, 1),
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–∏–±—ã–ª—å–Ω–æ' if ltv_cac_ratio > 1 else '–£–±—ã—Ç–æ—á–Ω–æ',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã %': round((cac / base_cac - 1) * 100, 1)
                })
            
            lifetime = ltv / base_arppu
            for arppu in arppu_range:
                new_ltv = arppu * lifetime
                ltv_cac_ratio = new_ltv / base_cac
                sensitivity_data.append({
                    '–ü–∞—Ä–∞–º–µ—Ç—Ä': 'ARPPU',
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': int(arppu),
                    'LTV/CAC': round(ltv_cac_ratio, 2),
                    'ROI %': round((ltv_cac_ratio - 1) * 100, 1),
                    '–°—Ç–∞—Ç—É—Å': '–ü—Ä–∏–±—ã–ª—å–Ω–æ' if ltv_cac_ratio > 1 else '–£–±—ã—Ç–æ—á–Ω–æ',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã %': round((arppu / base_arppu - 1) * 100, 1)
                })
            
            return pd.DataFrame(sensitivity_data)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
            return pd.DataFrame()
    
    def generate_insights(self, metrics: Dict, retention_data: pd.Series, industry: Optional[str] = None) -> List[Dict]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö."""
        insights = []
        
        try:
            # –ê–Ω–∞–ª–∏–∑ retention –∫—Ä–∏–≤–æ–π
            if len(retention_data) > 3:
                early_drop = (retention_data.iloc[0] - retention_data.iloc[2]) / retention_data.iloc[0]
                if early_drop > 0.6:
                    insights.append({
                        'type': 'warning',
                        'title': '–í—ã—Å–æ–∫–∏–π early churn',
                        'description': f'–ü–æ—Ç–µ—Ä—è {early_drop*100:.1f}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—è—Ü–∞',
                        'recommendation': '–£–ª—É—á—à–∏—Ç–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ first user experience',
                        'priority': 'high'
                    })
            
            # –ê–Ω–∞–ª–∏–∑ LTV/CAC
            if metrics['ltv_cac'] < 1.5:
                insights.append({
                    'type': 'critical',
                    'title': '–ù–∏–∑–∫–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å',
                    'description': f'LTV/CAC = {metrics["ltv_cac"]:.2f} - –º–æ–¥–µ–ª—å –Ω–µ—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–∞',
                    'recommendation': '–ö—Ä–∏—Ç–∏—á–Ω–æ: —Å–Ω–∏–∑—å—Ç–µ CAC –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ ARPPU/retention',
                    'priority': 'critical'
                })
            elif metrics['ltv_cac'] > 5:
                insights.append({
                    'type': 'success',
                    'title': '–û—Ç–ª–∏—á–Ω–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å',
                    'description': f'LTV/CAC = {metrics["ltv_cac"]:.2f} - –º–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å',
                    'recommendation': '–£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤',
                    'priority': 'medium'
                })
            
            # –ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
            if metrics.get('payback_period', 99) > 12:
                insights.append({
                    'type': 'warning',
                    'title': '–î–æ–ª–≥–∏–π –ø–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏',
                    'description': f'–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ {metrics["payback_period"]} –º–µ—Å—è—Ü–µ–≤',
                    'recommendation': '–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–∫—É–ø–æ–∫ –∏–ª–∏ ARPPU –≤ –ø–µ—Ä–≤—ã–µ –º–µ—Å—è—Ü—ã',
                    'priority': 'medium'
                })
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ retention
            if len(retention_data) > 6:
                mid_retention = retention_data.iloc[3:6].mean()
                late_retention = retention_data.iloc[6:].mean()
                
                if late_retention > mid_retention:
                    insights.append({
                        'type': 'success',
                        'title': '–†–∞—Å—Ç—É—â–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å',
                        'description': 'Retention —Ä–∞—Å—Ç–µ—Ç –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ',
                        'recommendation': '–ò–∑—É—á–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—ã —Ä–æ—Å—Ç–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
                        'priority': 'low'
                    })
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏
            if industry and industry in self.industry_benchmarks:
                benchmark = self.industry_benchmarks[industry]
                
                if metrics['ltv_cac'] < benchmark['ltv_cac'] * 0.8:
                    insights.append({
                        'type': 'warning',
                        'title': f'–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏',
                        'description': f'LTV/CAC {metrics["ltv_cac"]:.2f} vs {benchmark["ltv_cac"]:.2f} –≤ {industry}',
                        'recommendation': '–ò–∑—É—á–∏—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
                        'priority': 'medium'
                    })
                
                if metrics['lifetime'] > benchmark['lifetime_months'] * 1.2:
                    insights.append({
                        'type': 'success',
                        'title': '–í—ã—Å–æ–∫–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤',
                        'description': f'Lifetime {metrics["lifetime"]:.1f} –º–µ—Å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏',
                        'recommendation': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ',
                        'priority': 'low'
                    })
            
            # –ê–Ω–∞–ª–∏–∑ ML –ø—Ä–æ–≥–Ω–æ–∑–∞
            if len(metrics.get('ml_forecast', [])) > 0:
                forecast_improvement = (metrics['extended_ltv'] - metrics['ltv']) / metrics['ltv']
                
                if forecast_improvement > 0.1:
                    insights.append({
                        'type': 'info',
                        'title': '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞ LTV',
                        'description': f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç LTV –Ω–∞ {forecast_improvement*100:.1f}%',
                        'recommendation': '–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤',
                        'priority': 'medium'
                    })
            
            return sorted(insights, key=lambda x: {'critical': 3, 'high': 2, 'medium': 1, 'low': 0}[x['priority']], reverse=True)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {str(e)}")
            return []
    
    def scenario_planning(self, base_metrics: Dict, arppu: float, cac: float, retention: pd.Series) -> pd.DataFrame:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞."""
        scenarios = {
            '–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π üöÄ': {
                'arppu_change': 1.25,
                'retention_boost': 1.20,
                'cac_change': 0.85,
                'description': '–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è + –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞'
            },
            '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π üìà': {
                'arppu_change': 1.08,
                'retention_boost': 1.08,
                'cac_change': 1.02,
                'description': '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è'
            },
            '–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π üìâ': {
                'arppu_change': 0.92,
                'retention_boost': 0.88,
                'cac_change': 1.15,
                'description': '–£—Ö—É–¥—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏'
            },
            '–ö—Ä–∏–∑–∏—Å–Ω—ã–π üî¥': {
                'arppu_change': 0.85,
                'retention_boost': 0.75,
                'cac_change': 1.3,
                'description': '–°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ä—ã–Ω–∫–µ'
            }
        }
        
        scenario_results = []
        
        for scenario_name, changes in scenarios.items():
            new_arppu = arppu * changes['arppu_change']
            new_retention = retention * changes['retention_boost']
            new_cac = cac * changes['cac_change']
            
            new_metrics = self.calculate_metrics(new_retention, new_arppu, new_cac)
            
            scenario_results.append({
                '–°—Ü–µ–Ω–∞—Ä–∏–π': scenario_name,
                '–û–ø–∏—Å–∞–Ω–∏–µ': changes['description'],
                'LTV': f"{new_metrics['ltv']:,.0f} ‚ÇΩ",
                'LTV/CAC': f"{new_metrics['ltv_cac']:.2f}",
                'ROI %': f"{new_metrics['roi_percent']:+.1f}%",
                '–ò–∑–º–µ–Ω–µ–Ω–∏–µ LTV': f"{((new_metrics['ltv'] / base_metrics['ltv']) - 1)*100:+.1f}%",
                '–°—Ç–∞—Ç—É—Å': '‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω–æ' if new_metrics['ltv_cac'] > 1 else '‚ùå –£–±—ã—Ç–æ—á–Ω–æ'
            })
        
        return pd.DataFrame(scenario_results)
    
    def check_alerts(self, metrics: Dict, thresholds: Dict) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤."""
        alerts = []
        
        try:
            if metrics['ltv_cac'] < thresholds.get('ltv_cac_min', 1.0):
                alerts.append({
                    'type': 'critical',
                    'title': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ LTV/CAC',
                    'message': f"LTV/CAC —É–ø–∞–ª –¥–æ {metrics['ltv_cac']:.2f}",
                    'recommendation': "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ retention –∏–ª–∏ —Ä–æ—Å—Ç–µ CAC",
                    'timestamp': datetime.now()
                })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è retention
            if 'retention' in metrics:
                retention_changes = metrics['retention'].pct_change().abs()
                max_change = retention_changes.max()
                
                if max_change > thresholds.get('retention_drop', 0.2):
                    alerts.append({
                        'type': 'warning',
                        'title': '–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ retention',
                        'message': f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ retention –Ω–∞ {max_change*100:.1f}%",
                        'recommendation': "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                        'timestamp': datetime.now()
                    })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
            if metrics.get('payback_period', 0) > thresholds.get('payback_max', 12):
                alerts.append({
                    'type': 'warning',
                    'title': '–£–≤–µ–ª–∏—á–∏–ª—Å—è –ø–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏',
                    'message': f"–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ {metrics['payback_period']} –º–µ—Å—è—Ü–µ–≤",
                    'recommendation': "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ ARPPU –≤ –ø–µ—Ä–≤—ã–µ –º–µ—Å—è—Ü—ã",
                    'timestamp': datetime.now()
                })
            
            return alerts
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {str(e)}")
            return []
    
    def send_slack_notification(self, webhook_url: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack."""
        try:
            payload = {
                'text': f"üö® –ê–ª–µ—Ä—Ç LTV –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {message}",
                'username': 'LTV Calculator',
                'icon_emoji': ':chart_with_upwards_trend:'
            }
            
            response = requests.post(webhook_url, json=payload, timeout=10)
            response.raise_for_status()
            return True
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack: {str(e)}")
            return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
@st.cache_resource
def get_calculator():
    return LifetimeCalculatorPro()

calculator = get_calculator()

def create_advanced_plotly_charts(metrics: Dict, cohort_data: List = None) -> Tuple[Any, Any, Any, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å Plotly."""
    retention = metrics['retention']
    cumulative_ltv = metrics['cumulative_ltv']
    monthly_ltv = metrics['monthly_ltv']
    
    months = list(range(1, len(retention) + 1))
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: Retention –∫—Ä–∏–≤–∞—è —Å ML –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    fig_retention = go.Figure()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è retention
    fig_retention.add_trace(go.Scatter(
        x=months, 
        y=retention,
        mode='lines+markers',
        name='Retention (—Ñ–∞–∫—Ç)',
        line=dict(color='#667eea', width=3),
        marker=dict(size=8),
        hovertemplate='–ú–µ—Å—è—Ü %{x}<br>Retention: %{y:.2%}<extra></extra>'
    ))
    
    # ML –ø—Ä–æ–≥–Ω–æ–∑
    if len(metrics.get('ml_forecast', [])) > 0:
        future_months = list(range(len(retention) + 1, len(retention) + len(metrics['ml_forecast']) + 1))
        fig_retention.add_trace(go.Scatter(
            x=future_months,
            y=metrics['ml_forecast'],
            mode='lines+markers',
            name='ML –ü—Ä–æ–≥–Ω–æ–∑',
            line=dict(color='#ff7f0e', width=2, dash='dash'),
            marker=dict(size=6),
            hovertemplate='–ú–µ—Å—è—Ü %{x}<br>–ü—Ä–æ–≥–Ω–æ–∑: %{y:.2%}<extra></extra>'
        ))
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–≥–æ—Ä—Ç–∞–º–∏
    if cohort_data:
        colors = ['#2ca02c', '#d62728', '#9467bd', '#8c564b']
        for i, (cohort_df, cohort_name) in enumerate(cohort_data):
            cohort_retention = cohort_df['retention']
            cohort_months = list(range(1, len(cohort_retention) + 1))
            
            fig_retention.add_trace(go.Scatter(
                x=cohort_months,
                y=cohort_retention,
                mode='lines+markers',
                name=f'{cohort_name}',
                line=dict(color=colors[i % len(colors)], width=2),
                marker=dict(size=6),
                hovertemplate=f'{cohort_name}<br>–ú–µ—Å—è—Ü %{{x}}<br>Retention: %{{y:.2%}}<extra></extra>'
            ))
    
    fig_retention.update_layout(
        title="–ö—Ä–∏–≤–∞—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å ML –ø—Ä–æ–≥–Ω–æ–∑–æ–º",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="Retention",
        hovermode='x unified',
        yaxis=dict(tickformat='.1%')
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LTV —Å –∑–æ–Ω–∞–º–∏
    fig_ltv = go.Figure()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è LTV
    fig_ltv.add_trace(go.Scatter(
        x=months,
        y=cumulative_ltv,
        mode='lines+markers',
        name='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π LTV',
        line=dict(color='#2ca02c', width=3),
        marker=dict(size=8),
        fill='tonexty',
        hovertemplate='–ú–µ—Å—è—Ü %{x}<br>LTV: %{y:,.0f} ‚ÇΩ<extra></extra>'
    ))
    
    # –õ–∏–Ω–∏—è CAC –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    cac_line = [metrics['ltv'] / metrics['ltv_cac']] * len(months)
    fig_ltv.add_trace(go.Scatter(
        x=months,
        y=cac_line,
        mode='lines',
        name='CAC',
        line=dict(color='red', width=2, dash='dot'),
        hovertemplate='CAC: %{y:,.0f} ‚ÇΩ<extra></extra>'
    ))
    
    fig_ltv.update_layout(
        title="–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ LTV vs CAC",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="LTV (—Ä—É–±.)",
        hovermode='x unified'
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –ú–µ—Å—è—á–Ω—ã–π LTV —Å —Ç—Ä–µ–Ω–¥–æ–º
    fig_monthly = go.Figure()
    
    fig_monthly.add_trace(go.Bar(
        x=months,
        y=monthly_ltv,
        name='–ú–µ—Å—è—á–Ω—ã–π LTV',
        marker_color='#764ba2',
        hovertemplate='–ú–µ—Å—è—Ü %{x}<br>LTV: %{y:,.0f} ‚ÇΩ<extra></extra>'
    ))
    
    # –¢—Ä–µ–Ω–¥ –ª–∏–Ω–∏—è
    if len(monthly_ltv) > 3:
        z = np.polyfit(months, monthly_ltv, 1)
        p = np.poly1d(z)
        fig_monthly.add_trace(go.Scatter(
            x=months,
            y=p(months),
            mode='lines',
            name='–¢—Ä–µ–Ω–¥',
            line=dict(color='red', width=2),
            hovertemplate='–¢—Ä–µ–Ω–¥: %{y:,.0f} ‚ÇΩ<extra></extra>'
        ))
    
    fig_monthly.update_layout(
        title="–ú–µ—Å—è—á–Ω—ã–π –≤–∫–ª–∞–¥ –≤ LTV —Å —Ç—Ä–µ–Ω–¥–æ–º",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="LTV –∑–∞ –º–µ—Å—è—Ü (—Ä—É–±.)",
        hovermode='x unified'
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 4: –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞)
    fig_sensitivity = create_sensitivity_heatmap(metrics)
    
    return fig_retention, fig_ltv, fig_monthly, fig_sensitivity

def create_sensitivity_heatmap(metrics: Dict) -> go.Figure:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LTV/CAC."""
    try:
        base_ltv = metrics['ltv']
        base_cac = base_ltv / metrics['ltv_cac']
        
        # –î–∏–∞–ø–∞–∑–æ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
        cac_changes = np.linspace(0.5, 2.0, 10)
        arppu_changes = np.linspace(0.7, 1.5, 10)
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ LTV/CAC
        ltv_cac_matrix = []
        for arppu_change in arppu_changes:
            row = []
            for cac_change in cac_changes:
                new_ltv = base_ltv * arppu_change
                new_cac = base_cac * cac_change
                ltv_cac_ratio = new_ltv / new_cac
                row.append(ltv_cac_ratio)
            ltv_cac_matrix.append(row)
        
        fig = go.Figure(data=go.Heatmap(
            z=ltv_cac_matrix,
            x=[f"{c:.1f}x" for c in cac_changes],
            y=[f"{a:.1f}x" for a in arppu_changes],
            colorscale='RdYlGn',
            colorbar=dict(title="LTV/CAC"),
            hovertemplate='CAC: %{x}<br>ARPPU: %{y}<br>LTV/CAC: %{z:.2f}<extra></extra>'
        ))
        
        fig.update_layout(
            title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LTV/CAC",
            xaxis_title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ CAC",
            yaxis_title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ ARPPU"
        )
        
        return fig
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {str(e)}")
        return go.Figure()

def export_results_to_excel(metrics: Dict, sensitivity_df: pd.DataFrame, insights: List[Dict], scenario_df: pd.DataFrame) -> bytes:
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel."""
    output = BytesIO()
    
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        main_metrics = pd.DataFrame({
            '–ú–µ—Ç—Ä–∏–∫–∞': ['Lifetime (–º–µ—Å)', 'LTV (—Ä—É–±)', 'LTV/CAC', 'ROI (%)', '–ü–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ (–º–µ—Å)', '–ü—Ä–æ–≥–Ω–æ–∑ LTV (—Ä—É–±)'],
            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                round(metrics['lifetime'], 2),
                round(metrics['ltv'], 0),
                round(metrics['ltv_cac'], 2),
                round(metrics['roi_percent'], 1),
                metrics['payback_period'] or '–ù–µ –æ–∫—É–ø–∞–µ—Ç—Å—è',
                round(metrics.get('extended_ltv', metrics['ltv']), 0)
            ]
        })
        main_metrics.to_excel(writer, sheet_name='–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏', index=False)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        monthly_data = pd.DataFrame({
            '–ú–µ—Å—è—Ü': range(1, len(metrics['retention']) + 1),
            'Retention': metrics['retention'].round(4),
            '–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π LTV': metrics['cumulative_ltv'].round(0),
            '–ú–µ—Å—è—á–Ω—ã–π LTV': metrics['monthly_ltv'].round(0),
            'Churn Rate': metrics['churn_rates'].round(4)
        })
        monthly_data.to_excel(writer, sheet_name='–ü–æ–º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', index=False)
        
        # –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if not sensitivity_df.empty:
            sensitivity_df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', index=False)
        
        # ML –ø—Ä–æ–≥–Ω–æ–∑
        if len(metrics.get('ml_forecast', [])) > 0:
            forecast_data = pd.DataFrame({
                '–ú–µ—Å—è—Ü': range(len(metrics['retention']) + 1, len(metrics['retention']) + len(metrics['ml_forecast']) + 1),
                'ML –ü—Ä–æ–≥–Ω–æ–∑ Retention': metrics['ml_forecast'].round(4)
            })
            forecast_data.to_excel(writer, sheet_name='ML –ü—Ä–æ–≥–Ω–æ–∑', index=False)
        
        # –ò–Ω—Å–∞–π—Ç—ã
        if insights:
            insights_df = pd.DataFrame([
                {
                    '–¢–∏–ø': insight['type'],
                    '–ó–∞–≥–æ–ª–æ–≤–æ–∫': insight['title'],
                    '–û–ø–∏—Å–∞–Ω–∏–µ': insight['description'],
                    '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è': insight['recommendation'],
                    '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç': insight['priority']
                }
                for insight in insights
            ])
            insights_df.to_excel(writer, sheet_name='–ò–Ω—Å–∞–π—Ç—ã', index=False)
        
        # –°—Ü–µ–Ω–∞—Ä–∏–∏
        if not scenario_df.empty:
            scenario_df.to_excel(writer, sheet_name='–°—Ü–µ–Ω–∞—Ä–∏–∏', index=False)
    
    return output.getvalue()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">üìà Lifetime & LTV Calculator Pro</h1>', unsafe_allow_html=True)
    st.markdown("**–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å ML, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π**")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±—ã
    main_tabs = st.tabs([
        "üìä –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑",
        "üîó Google Sheets",
        "üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç", 
        "ü§ñ ML & –ü—Ä–æ–≥–Ω–æ–∑—ã",
        "üéØ –°—Ü–µ–Ω–∞—Ä–∏–∏",
        "üö® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
        "üèÜ –ë–µ–Ω—á–º–∞—Ä–∫–∏"
    ])
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    with main_tabs[0]:
        main_analysis_tab()
    
    # Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    with main_tabs[1]:
        google_sheets_tab()
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç
    with main_tabs[2]:
        cohort_comparison_tab()
    
    # ML –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
    with main_tabs[3]:
        ml_forecasting_tab()
    
    # –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    with main_tabs[4]:
        scenario_planning_tab()
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã
    with main_tabs[5]:
        monitoring_tab()
    
    # –ë–µ–Ω—á–º–∞—Ä–∫–∏
    with main_tabs[6]:
        benchmarks_tab()

def main_analysis_tab():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ LTV."""
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        data_source = st.radio(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
            ["üìÅ –§–∞–π–ª", "üîó Google Sheets", "üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥"]
        )
        
        df = None
        
        if data_source == "üìÅ –§–∞–π–ª":
            uploaded_file = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å retention –¥–∞–Ω–Ω—ã–º–∏",
                type=['csv', 'xlsx', 'xls']
            )
            
            if uploaded_file:
                df, status = calculator.read_file(uploaded_file)
                if status == "success":
                    st.success("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.error(f"‚ùå {status}")
                    return
        
        elif data_source == "üîó Google Sheets":
            sheets_url = st.text_input(
                "–°—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets:",
                placeholder="https://docs.google.com/spreadsheets/d/..."
            )
            sheet_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
            
            if sheets_url and st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å"):
                df, status = calculator.load_from_google_sheets(sheets_url, sheet_name)
                if status == "success":
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google Sheets!")
                else:
                    st.error(f"‚ùå {status}")
                    return
        
        elif data_source == "üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥":
            st.subheader("–í–≤–µ–¥–∏—Ç–µ retention –¥–∞–Ω–Ω—ã–µ")
            
            num_months = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤:", 6, 36, 12)
            
            retention_values = []
            cols = st.columns(3)
            
            for i in range(num_months):
                col_idx = i % 3
                with cols[col_idx]:
                    value = st.number_input(
                        f"–ú–µ—Å—è—Ü {i+1}:",
                        min_value=0.0,
                        max_value=100.0,
                        value=max(0.1, 100 * (0.5 ** (i/6))),  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        step=0.1,
                        key=f"retention_{i}"
                    )
                    retention_values.append(value)
            
            if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                df = pd.DataFrame({
                    '–ú–µ—Å—è—Ü': range(1, num_months + 1),
                    'Retention': retention_values
                })
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã!")
        
        if df is not None and not df.empty:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"):
                st.dataframe(df.head())
            
            # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏
            retention_col = st.selectbox(
                "üìä –ö–æ–ª–æ–Ω–∫–∞ —Å retention:",
                ["–ê–≤—Ç–æ–ø–æ–∏—Å–∫"] + list(df.columns)
            )
            
            if retention_col == "–ê–≤—Ç–æ–ø–æ–∏—Å–∫":
                retention_col = None
            
            st.markdown("---")
            
            # –ë–∏–∑–Ω–µ—Å-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            st.subheader("üíº –ë–∏–∑–Ω–µ—Å-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            
            col1, col2 = st.columns(2)
            with col1:
                arppu = st.number_input("ARPPU (—Ä—É–±.):", min_value=0.01, value=71.0, step=1.0)
            with col2:
                cac = st.number_input("CAC (—Ä—É–±.):", min_value=0.01, value=184.0, step=1.0)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            st.markdown("---")
            st.subheader("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            show_forecast = st.checkbox("ü§ñ ML –ø—Ä–æ–≥–Ω–æ–∑", value=True)
            show_sensitivity = st.checkbox("üéØ –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", value=True)
            
            industry = st.selectbox(
                "üè≠ –ò–Ω–¥—É—Å—Ç—Ä–∏—è –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤:",
                ["–ù–µ –≤—ã–±—Ä–∞–Ω–æ"] + list(calculator.industry_benchmarks.keys())
            )
            
            if industry == "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
                industry = None
            
            # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
            if st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏", type="primary"):
                perform_analysis(df, retention_col, arppu, cac, show_forecast, show_sensitivity, industry)
        
        else:
            st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            st.markdown("### üìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
            example_data = pd.DataFrame({
                '–ú–µ—Å—è—Ü': range(1, 13),
                '% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞': [100, 51.7, 42.4, 36.8, 32.1, 28.9, 26.4, 24.3, 22.6, 21.1, 19.8, 18.7]
            })
            st.dataframe(example_data)

def perform_analysis(df, retention_col, arppu, cac, show_forecast, show_sensitivity, industry):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ LTV."""
    with st.spinner("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç—ã..."):
        # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ retention
        col_name, col_status = calculator.find_retention_column(df, retention_col)
        
        if not col_name:
            st.error(f"‚ùå {col_status}")
            st.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns)}")
            return
        
        if col_status.startswith("warning"):
            st.warning(f"‚ö†Ô∏è {col_status}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        retention_data, validation_status = calculator.validate_retention_data(df[col_name])
        
        if validation_status != "success":
            st.error(f"‚ùå {validation_status}")
            return
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        metrics = calculator.calculate_metrics(retention_data, arppu, cac)
        
        if metrics['status'] != 'success':
            st.error(f"‚ùå {metrics['status']}")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
    st.session_state['metrics'] = metrics
    st.session_state['retention_data'] = retention_data
    st.session_state['arppu'] = arppu
    st.session_state['cac'] = cac
    st.session_state['industry'] = industry
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.success("‚úÖ –†–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    display_main_metrics(metrics, show_forecast)
    
    # –ò–Ω—Å–∞–π—Ç—ã
    insights = calculator.generate_insights(metrics, retention_data, industry)
    display_insights(insights)
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    display_interpretation(metrics)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    display_charts(metrics)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    display_detailed_data(metrics)
    
    # –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if show_sensitivity:
        display_sensitivity_analysis(metrics, arppu, cac)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–∏
    display_scenario_planning(metrics, arppu, cac, retention_data)
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    display_export_section(metrics, insights)

def display_main_metrics(metrics, show_forecast):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
    st.markdown("## üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "‚è±Ô∏è Lifetime",
            f"{metrics['lifetime']:.2f} –º–µ—Å",
            help="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"
        )
    
    with col2:
        delta_text = None
        if show_forecast and 'extended_ltv' in metrics:
            delta = metrics['extended_ltv'] - metrics['ltv']
            delta_text = f"{delta:,.0f} ‚ÇΩ (–ø—Ä–æ–≥–Ω–æ–∑)"
        
        st.metric(
            "üíé LTV",
            f"{metrics['ltv']:,.0f} ‚ÇΩ",
            delta=delta_text,
            help="–û–±—â–∏–π –¥–æ—Ö–æ–¥ —Å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
        )
    
    with col3:
        st.metric(
            "üìà LTV/CAC",
            f"{metrics['ltv_cac']:.2f}",
            delta=f"{metrics['roi_percent']:+.1f}% ROI",
            help="–û—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∫ –∑–∞—Ç—Ä–∞—Ç–∞–º –Ω–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ"
        )
    
    with col4:
        payback_text = f"{metrics['payback_period']} –º–µ—Å" if metrics['payback_period'] else "–ù–µ –æ–∫—É–ø–∞–µ—Ç—Å—è"
        st.metric(
            "üí∞ –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å",
            payback_text,
            help="–í—Ä–µ–º—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞"
        )

def display_insights(insights):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã."""
    if insights:
        st.markdown("## üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã")
        
        for insight in insights:
            if insight['type'] == 'critical':
                st.error(f"üî¥ **{insight['title']}**: {insight['description']}")
            elif insight['type'] == 'warning':
                st.warning(f"üü° **{insight['title']}**: {insight['description']}")
            elif insight['type'] == 'success':
                st.success(f"üü¢ **{insight['title']}**: {insight['description']}")
            else:
                st.info(f"üîµ **{insight['title']}**: {insight['description']}")
            
            st.markdown(f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {insight['recommendation']}*")
            st.markdown("---")

def display_interpretation(metrics):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    st.markdown("## üéØ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    if metrics['ltv_cac'] < 1:
        st.error("üî¥ **–£–±—ã—Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å**: LTV < CAC. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!")
    elif metrics['ltv_cac'] < 2:
        st.warning("üü° **–û–∫—É–ø–∞–µ—Ç—Å—è, –Ω–æ –µ—Å—Ç—å —Ä–∏—Å–∫–∏**: LTV/CAC < 2. –ù—É–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è.")
    elif metrics['ltv_cac'] < 3:
        st.info("üîµ **–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å**: LTV/CAC = 2-3. –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞.")
    else:
        st.success("üü¢ **–û—Ç–ª–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å**: LTV/CAC > 3. –ú–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å!")

def display_charts(metrics):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏."""
    st.markdown("## üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    fig_retention, fig_ltv, fig_monthly, fig_sensitivity = create_advanced_plotly_charts(metrics)
    
    tab1, tab2, tab3, tab4 = st.tabs(["üìâ Retention", "üìà LTV", "üìä –ú–µ—Å—è—á–Ω—ã–π LTV", "üî• –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"])
    
    with tab1:
        st.plotly_chart(fig_retention, use_container_width=True)
    
    with tab2:
        st.plotly_chart(fig_ltv, use_container_width=True)
    
    with tab3:
        st.plotly_chart(fig_monthly, use_container_width=True)
    
    with tab4:
        st.plotly_chart(fig_sensitivity, use_container_width=True)

def display_detailed_data(metrics):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    st.markdown("## üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    detailed_data = pd.DataFrame({
        '–ú–µ—Å—è—Ü': range(1, len(metrics['retention']) + 1),
        'Retention %': (metrics['retention'] * 100).round(2),
        '–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π LTV': metrics['cumulative_ltv'].round(0),
        '–ú–µ—Å—è—á–Ω—ã–π LTV': metrics['monthly_ltv'].round(0),
        'Churn Rate %': (metrics['churn_rates'] * 100).round(2)
    })
    
    st.dataframe(detailed_data, use_container_width=True)

def display_sensitivity_analysis(metrics, arppu, cac):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    st.markdown("## üéØ –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    sensitivity_df = calculator.create_sensitivity_analysis(metrics['ltv'], cac, arppu)
    
    if not sensitivity_df.empty:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä –ü–æ CAC")
            cac_data = sensitivity_df[sensitivity_df['–ü–∞—Ä–∞–º–µ—Ç—Ä'] == 'CAC']
            st.dataframe(cac_data, use_container_width=True)
        
        with col2:
            st.subheader("üìä –ü–æ ARPPU")
            arppu_data = sensitivity_df[sensitivity_df['–ü–∞—Ä–∞–º–µ—Ç—Ä'] == 'ARPPU']
            st.dataframe(arppu_data, use_container_width=True)

def display_scenario_planning(metrics, arppu, cac, retention_data):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    st.markdown("## üé≠ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    scenario_df = calculator.scenario_planning(metrics, arppu, cac, retention_data)
    st.dataframe(scenario_df, use_container_width=True)

def display_export_section(metrics, insights):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–µ–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    st.markdown("## üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Excel —ç–∫—Å–ø–æ—Ä—Ç
        sensitivity_df = calculator.create_sensitivity_analysis(
            metrics['ltv'], 
            st.session_state.get('cac', 184), 
            st.session_state.get('arppu', 71)
        )
        scenario_df = calculator.scenario_planning(
            metrics, 
            st.session_state.get('arppu', 71), 
            st.session_state.get('cac', 184), 
            st.session_state.get('retention_data', pd.Series())
        )
        
        excel_data = export_results_to_excel(metrics, sensitivity_df, insights, scenario_df)
        
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (Excel)",
            data=excel_data,
            file_name=f"ltv_analysis_full_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    
    with col2:
        # JSON —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        json_data = {
            'timestamp': datetime.now().isoformat(),
            'metrics': {
                'lifetime': float(metrics['lifetime']),
                'ltv': float(metrics['ltv']),
                'ltv_cac': float(metrics['ltv_cac']),
                'roi_percent': float(metrics['roi_percent']),
                'payback_period': metrics['payback_period']
            },
            'insights': insights
        }
        
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (JSON)",
            data=json.dumps(json_data, ensure_ascii=False, indent=2),
            file_name=f"ltv_data_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
            mime="application/json"
        )

def google_sheets_tab():
    """–í–∫–ª–∞–¥–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets."""
    st.markdown("## üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets")
    
    st.markdown("""
    ### üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É Google Sheets —Ç–∞–±–ª–∏—Ü—É —Å retention –¥–∞–Ω–Ω—ã–º–∏
    2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∏–ª–∏ –æ–Ω–∞ –ø—É–±–ª–∏—á–Ω–∞—è)
    3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
    4. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å"
    """)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        sheets_url = st.text_input(
            "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets:",
            placeholder="https://docs.google.com/spreadsheets/d/1ABC123.../edit#gid=0"
        )
    
    with col2:
        sheet_name = st.text_input(
            "üìã –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞:",
            placeholder="–õ–∏—Å—Ç1 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        )
    
    if sheets_url:
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
                with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets..."):
                    df, status = calculator.load_from_google_sheets(sheets_url, sheet_name or None)
                    
                    if status == "success":
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                        st.session_state['sheets_data'] = df
                        st.session_state['sheets_url'] = sheets_url
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                        st.markdown("### üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:")
                        st.dataframe(df.head(10))
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                        if st.button("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"):
                            perform_sheets_analysis(df)
                    else:
                        st.error(f"‚ùå {status}")
        
        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                if 'sheets_url' in st.session_state:
                    with st.spinner("–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ..."):
                        df, status = calculator.load_from_google_sheets(st.session_state['sheets_url'], sheet_name or None)
                        if status == "success":
                            st.session_state['sheets_data'] = df
                            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                            st.rerun()
        
        with col3:
            if st.button("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"):
                setup_sheets_monitoring(sheets_url)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if 'sheets_data' in st.session_state:
        st.markdown("### üíæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        st.dataframe(st.session_state['sheets_data'].head())

def perform_sheets_analysis(df):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets."""
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ retention
    col_name, col_status = calculator.find_retention_column(df)
    
    if not col_name:
        st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å retention –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    retention_data, validation_status = calculator.validate_retention_data(df[col_name])
    
    if validation_status != "success":
        st.error(f"‚ùå {validation_status}")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    arppu = 71.0
    cac = 184.0
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    metrics = calculator.calculate_metrics(retention_data, arppu, cac)
    
    if metrics['status'] != 'success':
        st.error(f"‚ùå {metrics['status']}")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.success("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Lifetime", f"{metrics['lifetime']:.2f} –º–µ—Å")
    with col2:
        st.metric("LTV", f"{metrics['ltv']:,.0f} ‚ÇΩ")
    with col3:
        st.metric("LTV/CAC", f"{metrics['ltv_cac']:.2f}")
    
    # –ì—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=list(range(1, len(retention_data) + 1)),
        y=retention_data,
        mode='lines+markers',
        name='Retention'
    ))
    
    fig.update_layout(
        title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ Retention",
        xaxis_title="–ú–µ—Å—è—Ü",
        yaxis_title="Retention"
    )
    
    st.plotly_chart(fig, use_container_width=True)

def setup_sheets_monitoring(sheets_url):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Google Sheets."""
    st.markdown("### üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    col1, col2 = st.columns(2)
    
    with col1:
        check_interval = st.selectbox(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            ["–ö–∞–∂–¥—ã–π —á–∞—Å", "–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤", "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"]
        )
        
        ltv_cac_threshold = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π LTV/CAC –¥–ª—è –∞–ª–µ—Ä—Ç–∞:",
            min_value=0.1,
            value=1.0,
            step=0.1
        )
    
    with col2:
        email = st.text_input("Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        slack_webhook = st.text_input("Slack Webhook URL:")
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        st.info("üìß –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫")

def cohort_comparison_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–≥–æ—Ä—Ç."""
    st.markdown("## üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç")
    
    st.markdown("""
    –°—Ä–∞–≤–Ω–∏—Ç–µ retention –∏ LTV –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–≥–æ—Ä—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –Ω–∞–∏–±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.
    """)
    
    num_cohorts = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–≥–æ—Ä—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", 2, 5, 2)
    
    cohort_data = []
    cohort_names = []
    
    for i in range(num_cohorts):
        st.markdown(f"### –ö–æ–≥–æ—Ä—Ç–∞ {i+1}")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            cohort_name = st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç—ã {i+1}:", value=f"–ö–æ–≥–æ—Ä—Ç–∞ {i+1}", key=f"cohort_name_{i}")
            cohort_file = st.file_uploader(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–æ—Ä—Ç—ã {i+1}:", type=['csv', 'xlsx'], key=f"cohort_file_{i}")
        
        with col2:
            cohort_arppu = st.number_input(f"ARPPU –∫–æ–≥–æ—Ä—Ç—ã {i+1}:", min_value=0.01, value=71.0, key=f"cohort_arppu_{i}")
            cohort_cac = st.number_input(f"CAC –∫–æ–≥–æ—Ä—Ç—ã {i+1}:", min_value=0.01, value=184.0, key=f"cohort_cac_{i}")
        
        if cohort_file:
            df, status = calculator.read_file(cohort_file)
            if status == "success":
                col_name, _ = calculator.find_retention_column(df)
                if col_name:
                    retention_data, validation_status = calculator.validate_retention_data(df[col_name])
                    if validation_status == "success":
                        metrics = calculator.calculate_metrics(retention_data, cohort_arppu, cohort_cac)
                        if metrics['status'] == 'success':
                            cohort_data.append({
                                'name': cohort_name,
                                'retention': retention_data,
                                'metrics': metrics,
                                'arppu': cohort_arppu,
                                'cac': cohort_cac
                            })
                            cohort_names.append(cohort_name)
                            
                            st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–≥–æ—Ä—Ç—ã {i+1} –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–æ–≥–æ—Ä—Ç—ã {i+1}")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–æ—Ä—Ç—ã {i+1}")
                else:
                    st.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ retention –¥–ª—è –∫–æ–≥–æ—Ä—Ç—ã {i+1}")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–≥–æ—Ä—Ç—ã {i+1}: {status}")
        
        st.markdown("---")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç
    if len(cohort_data) >= 2:
        st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_data = []
        for cohort in cohort_data:
            comparison_data.append({
                '–ö–æ–≥–æ—Ä—Ç–∞': cohort['name'],
                'Lifetime (–º–µ—Å)': f"{cohort['metrics']['lifetime']:.2f}",
                'LTV (—Ä—É–±)': f"{cohort['metrics']['ltv']:,.0f}",
                'LTV/CAC': f"{cohort['metrics']['ltv_cac']:.2f}",
                'ROI (%)': f"{cohort['metrics']['roi_percent']:+.1f}%",
                '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–º–µ—Å)': cohort['metrics']['payback_period'] or '–ù–µ –æ–∫—É–ø–∞–µ—Ç—Å—è'
            })
        
        comparison_df = pd.DataFrame(comparison_data)
        st.dataframe(comparison_df, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è retention
        fig_comparison = go.Figure()
        
        colors = ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe']
        
        for i, cohort in enumerate(cohort_data):
            months = list(range(1, len(cohort['retention']) + 1))
            fig_comparison.add_trace(go.Scatter(
                x=months,
                y=cohort['retention'],
                mode='lines+markers',
                name=f"{cohort['name']} (LTV: {cohort['metrics']['ltv']:,.0f}‚ÇΩ)",
                line=dict(color=colors[i % len(colors)], width=3),
                marker=dict(size=8)
            ))
        
        fig_comparison.update_layout(
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ retention –º–µ–∂–¥—É –∫–æ–≥–æ—Ä—Ç–∞–º–∏",
            xaxis_title="–ú–µ—Å—è—Ü",
            yaxis_title="Retention",
            hovermode='x unified'
        )
        
        st.plotly_chart(fig_comparison, use_container_width=True)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.markdown("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        # –ù–∞–π–¥–µ–º –ª—É—á—à—É—é –∫–æ–≥–æ—Ä—Ç—É
        best_cohort = max(cohort_data, key=lambda x: x['metrics']['ltv_cac'])
        worst_cohort = min(cohort_data, key=lambda x: x['metrics']['ltv_cac'])
        
        st.success(f"üèÜ **–õ—É—á—à–∞—è –∫–æ–≥–æ—Ä—Ç–∞**: {best_cohort['name']} (LTV/CAC: {best_cohort['metrics']['ltv_cac']:.2f})")
        st.error(f"‚ö†Ô∏è **–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è**: {worst_cohort['name']} (LTV/CAC: {worst_cohort['metrics']['ltv_cac']:.2f})")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        ltv_diff = (best_cohort['metrics']['ltv'] - worst_cohort['metrics']['ltv']) / worst_cohort['metrics']['ltv'] * 100
        
        st.info(f"üìä –†–∞–∑–Ω–∏—Ü–∞ –≤ LTV –º–µ–∂–¥—É –ª—É—á—à–µ–π –∏ —Ö—É–¥—à–µ–π –∫–æ–≥–æ—Ä—Ç–æ–π: {ltv_diff:+.1f}%")

def ml_forecasting_tab():
    """–í–∫–ª–∞–¥–∫–∞ ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è."""
    st.markdown("## ü§ñ ML –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    st.markdown("""
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è retention –∏ LTV –Ω–∞ –±—É–¥—É—â–∏–µ –ø–µ—Ä–∏–æ–¥—ã.
    –ê–ª–≥–æ—Ä–∏—Ç–º —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥—ã –≤ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ—Ç –∏—Ö –Ω–∞ –±—É–¥—É—â–µ–µ.
    """)
    
    if 'retention_data' in st.session_state and 'metrics' in st.session_state:
        retention_data = st.session_state['retention_data']
        metrics = st.session_state['metrics']
        
        col1, col2 = st.columns(2)
        
        with col1:
            forecast_months = st.slider("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥:", 3, 24, 12)
            
            confidence_level = st.selectbox(
                "–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è:",
                ["90%", "95%", "99%"]
            )
        
        with col2:
            model_type = st.selectbox(
                "–¢–∏–ø –º–æ–¥–µ–ª–∏:",
                ["–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ", "ARIMA"]
            )
            
            include_seasonality = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å", value=False)
        
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"):
            with st.spinner("–û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏ –¥–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑..."):
                # ML –ø—Ä–æ–≥–Ω–æ–∑
                ml_forecast = calculator.ml_forecast_retention(retention_data, forecast_months)
                
                if len(ml_forecast) > 0:
                    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
                    arppu = st.session_state.get('arppu', 71)
                    extended_lifetime = retention_data.sum() + ml_forecast.sum()
                    extended_ltv = arppu * extended_lifetime
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                    fig_forecast = go.Figure()
                    
                    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                    hist_months = list(range(1, len(retention_data) + 1))
                    fig_forecast.add_trace(go.Scatter(
                        x=hist_months,
                        y=retention_data,
                        mode='lines+markers',
                        name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
                        line=dict(color='#667eea', width=3),
                        marker=dict(size=8)
                    ))
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    forecast_months_list = list(range(len(retention_data) + 1, len(retention_data) + len(ml_forecast) + 1))
                    fig_forecast.add_trace(go.Scatter(
                        x=forecast_months_list,
                        y=ml_forecast,
                        mode='lines+markers',
                        name='ML –ü—Ä–æ–≥–Ω–æ–∑',
                        line=dict(color='#ff7f0e', width=3, dash='dash'),
                        marker=dict(size=8)
                    ))
                    
                    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                    if confidence_level == "95%":
                        error_margin = 0.1
                    elif confidence_level == "99%":
                        error_margin = 0.15
                    else:
                        error_margin = 0.05
                    
                    upper_bound = ml_forecast * (1 + error_margin)
                    lower_bound = ml_forecast * (1 - error_margin)
                    
                    fig_forecast.add_trace(go.Scatter(
                        x=forecast_months_list + forecast_months_list[::-1],
                        y=list(upper_bound) + list(lower_bound[::-1]),
                        fill='toself',
                        fillcolor='rgba(255, 127, 14, 0.2)',
                        line=dict(color='rgba(255,255,255,0)'),
                        name=f'–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ({confidence_level})',
                        hoverinfo="skip"
                    ))
                    
                    fig_forecast.update_layout(
                        title=f"ML –ü—Ä–æ–≥–Ω–æ–∑ retention –Ω–∞ {len(ml_forecast)} –º–µ—Å—è—Ü–µ–≤",
                        xaxis_title="–ú–µ—Å—è—Ü",
                        yaxis_title="Retention",
                        hovermode='x unified'
                    )
                    
                    st.plotly_chart(fig_forecast, use_container_width=True)
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "–ü—Ä–æ–≥–Ω–æ–∑ Lifetime",
                            f"{extended_lifetime:.2f} –º–µ—Å",
                            delta=f"+{ml_forecast.sum():.2f} –º–µ—Å"
                        )
                    
                    with col2:
                        st.metric(
                            "–ü—Ä–æ–≥–Ω–æ–∑ LTV",
                            f"{extended_ltv:,.0f} ‚ÇΩ",
                            delta=f"+{extended_ltv - metrics['ltv']:,.0f} ‚ÇΩ"
                        )
                    
                    with col3:
                        improvement = (extended_ltv / metrics['ltv'] - 1) * 100
                        st.metric(
                            "–†–æ—Å—Ç LTV",
                            f"{improvement:+.1f}%",
                            delta=f"vs —Ç–µ–∫—É—â–∏–π"
                        )
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
                    st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
                    
                    forecast_df = pd.DataFrame({
                        '–ú–µ—Å—è—Ü': forecast_months_list,
                        '–ü—Ä–æ–≥–Ω–æ–∑ Retention': ml_forecast.round(4),
                        '–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª': [f"{lower:.3f} - {upper:.3f}" for lower, upper in zip(lower_bound, upper_bound)],
                        '–ú–µ—Å—è—á–Ω—ã–π LTV': (ml_forecast * arppu).round(0)
                    })
                    
                    st.dataframe(forecast_df, use_container_width=True)
                    
                    # –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
                    st.markdown("### üéØ –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏")
                    
                    # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                    if len(retention_data) > 5:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20% –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                        train_size = int(len(retention_data) * 0.8)
                        train_data = retention_data[:train_size]
                        test_data = retention_data[train_size:]
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        test_forecast = calculator.ml_forecast_retention(train_data, len(test_data))
                        
                        if len(test_forecast) > 0:
                            # –†–∞—Å—á–µ—Ç –æ—à–∏–±–∫–∏
                            mape = np.mean(np.abs((test_data - test_forecast[:len(test_data)]) / test_data)) * 100
                            
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.metric("MAPE (–æ—à–∏–±–∫–∞)", f"{mape:.1f}%")
                            
                            with col2:
                                quality = "–û—Ç–ª–∏—á–Ω–æ–µ" if mape < 10 else "–•–æ—Ä–æ—à–µ–µ" if mape < 20 else "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
                                st.metric("–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏", quality)
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                    
                    if improvement > 10:
                        st.success("üöÄ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç LTV. –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
                    elif improvement > 0:
                        st.info("üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç LTV. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.")
                    else:
                        st.warning("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–µ retention. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞.")
                
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")
    
    else:
        st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑'")

def scenario_planning_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    st.markdown("## üé≠ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    st.markdown("""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ LTV.
    –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ä–∞–∑–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
    """)
    
    if 'metrics' in st.session_state and 'retention_data' in st.session_state:
        metrics = st.session_state['metrics']
        retention_data = st.session_state['retention_data']
        arppu = st.session_state.get('arppu', 71)
        cac = st.session_state.get('cac', 184)
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        st.markdown("### üìä –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
        
        scenario_df = calculator.scenario_planning(metrics, arppu, cac, retention_data)
        st.dataframe(scenario_df, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        fig_scenarios = go.Figure()
        
        scenario_names = scenario_df['–°—Ü–µ–Ω–∞—Ä–∏–π'].tolist()
        ltv_values = [float(x.replace(' ‚ÇΩ', '').replace(',', '')) for x in scenario_df['LTV'].tolist()]
        
        colors = ['#2ca02c', '#1f77b4', '#ff7f0e', '#d62728']
        
        fig_scenarios.add_trace(go.Bar(
            x=scenario_names,
            y=ltv_values,
            marker_color=colors,
            text=[f"{x:,.0f} ‚ÇΩ" for x in ltv_values],
            textposition='auto'
        ))
        
        fig_scenarios.update_layout(
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ LTV –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö",
            xaxis_title="–°—Ü–µ–Ω–∞—Ä–∏–π",
            yaxis_title="LTV (—Ä—É–±.)",
            showlegend=False
        )
        
        st.plotly_chart(fig_scenarios, use_container_width=True)
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        st.markdown("### üé® –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
        
        col1, col2 = st.columns(2)
        
        with col1:
            custom_scenario_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è:", "–ú–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
            
            arppu_change = st.slider(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ ARPPU:",
                min_value=0.5,
                max_value=2.0,
                value=1.0,
                step=0.05,
                format="%.2fx"
            )
            
            retention_change = st.slider(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ Retention:",
                min_value=0.5,
                max_value=2.0,
                value=1.0,
                step=0.05,
                format="%.2fx"
            )
        
        with col2:
            cac_change = st.slider(
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ CAC:",
                min_value=0.5,
                max_value=2.0,
                value=1.0,
                step=0.05,
                format="%.2fx"
            )
            
            scenario_description = st.text_area(
                "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è:",
                "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∏–∑–Ω–µ—Å–µ"
            )
        
        if st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"):
            # –†–∞—Å—á–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            new_arppu = arppu * arppu_change
            new_retention = retention_data * retention_change
            new_cac = cac * cac_change
            
            new_metrics = calculator.calculate_metrics(new_retention, new_arppu, new_cac)
            
            if new_metrics['status'] == 'success':
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(
                        "LTV",
                        f"{new_metrics['ltv']:,.0f} ‚ÇΩ",
                        delta=f"{new_metrics['ltv'] - metrics['ltv']:+,.0f} ‚ÇΩ"
                    )
                
                with col2:
                    st.metric(
                        "LTV/CAC",
                        f"{new_metrics['ltv_cac']:.2f}",
                        delta=f"{new_metrics['ltv_cac'] - metrics['ltv_cac']:+.2f}"
                    )
                
                with col3:
                    roi_change = new_metrics['roi_percent'] - metrics['roi_percent']
                    st.metric(
                        "ROI",
                        f"{new_metrics['roi_percent']:+.1f}%",
                        delta=f"{roi_change:+.1f}%"
                    )
                
                # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
                fig_custom = go.Figure()
                
                months = list(range(1, len(retention_data) + 1))
                
                fig_custom.add_trace(go.Scatter(
                    x=months,
                    y=retention_data,
                    mode='lines+markers',
                    name='–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
                    line=dict(color='#667eea', width=3)
                ))
                
                fig_custom.add_trace(go.Scatter(
                    x=months,
                    y=new_retention,
                    mode='lines+markers',
                    name=custom_scenario_name,
                    line=dict(color='#ff7f0e', width=3, dash='dash')
                ))
                
                fig_custom.update_layout(
                    title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ retention: —Ç–µ–∫—É—â–µ–µ vs {custom_scenario_name}",
                    xaxis_title="–ú–µ—Å—è—Ü",
                    yaxis_title="Retention",
                    hovermode='x unified'
                )
                
                st.plotly_chart(fig_custom, use_container_width=True)
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                st.markdown("### üí° –ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è")
                
                ltv_change_pct = (new_metrics['ltv'] / metrics['ltv'] - 1) * 100
                
                if ltv_change_pct > 20:
                    st.success(f"üöÄ –û—Ç–ª–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π! LTV –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ {ltv_change_pct:.1f}%")
                elif ltv_change_pct > 0:
                    st.info(f"üìà –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π. LTV –≤—ã—Ä–∞—Å—Ç–µ—Ç –Ω–∞ {ltv_change_pct:.1f}%")
                elif ltv_change_pct > -10:
                    st.warning(f"‚ö†Ô∏è –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ LTV –Ω–∞ {abs(ltv_change_pct):.1f}%")
                else:
                    st.error(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ LTV –Ω–∞ {abs(ltv_change_pct):.1f}%")
            
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        st.markdown("### üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ session"):
            if 'saved_scenarios' not in st.session_state:
                st.session_state['saved_scenarios'] = []
            
            scenario_data = {
                'name': custom_scenario_name,
                'arppu_change': arppu_change,
                'retention_change': retention_change,
                'cac_change': cac_change,
                'description': scenario_description,
                'created_at': datetime.now().isoformat()
            }
            
            st.session_state['saved_scenarios'].append(scenario_data)
            st.success("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        if 'saved_scenarios' in st.session_state and st.session_state['saved_scenarios']:
            st.markdown("### üìö –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
            
            for i, scenario in enumerate(st.session_state['saved_scenarios']):
                with st.expander(f"{scenario['name']} (—Å–æ–∑–¥–∞–Ω: {scenario['created_at'][:10]})"):
                    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ**: {scenario['description']}")
                    st.write(f"**ARPPU**: {scenario['arppu_change']:.2f}x")
                    st.write(f"**Retention**: {scenario['retention_change']:.2f}x")
                    st.write(f"**CAC**: {scenario['cac_change']:.2f}x")
                    
                    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{i}"):
                        st.session_state['saved_scenarios'].pop(i)
                        st.rerun()
    
    else:
        st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –≤–æ –≤–∫–ª–∞–¥–∫–µ '–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑'")

def monitoring_tab():
    """–í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–ª–µ—Ä—Ç–æ–≤."""
    st.markdown("## üö® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã")
    
    st.markdown("""
    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 
    –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ LTV, retention –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö.
    """)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        
        ltv_cac_threshold = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π LTV/CAC:",
            min_value=0.1,
            max_value=10.0,
            value=1.0,
            step=0.1,
            help="–ê–ª–µ—Ä—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ LTV/CAC –Ω–∏–∂–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
        )
        
        retention_drop_threshold = st.number_input(
            "–ö—Ä–∏—Ç–∏—á–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ retention (%):",
            min_value=1,
            max_value=50,
            value=20,
            help="–ê–ª–µ—Ä—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ retention –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ X%"
        )
        
        payback_threshold = st.number_input(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏ (–º–µ—Å):",
            min_value=1,
            max_value=24,
            value=12,
            help="–ê–ª–µ—Ä—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏"
        )
    
    with col2:
        st.subheader("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        email_notifications = st.text_input(
            "Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            placeholder="your.email@company.com"
        )
        
        slack_webhook = st.text_input(
            "Slack Webhook URL:",
            placeholder="https://hooks.slack.com/services/..."
        )
        
        telegram_bot_token = st.text_input(
            "Telegram Bot Token:",
            placeholder="123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
        )
        
        telegram_chat_id = st.text_input("Telegram Chat ID:",
            placeholder="-1001234567890"
        )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"):
        monitoring_settings = {
            'ltv_cac_threshold': ltv_cac_threshold,
            'retention_drop_threshold': retention_drop_threshold / 100,
            'payback_threshold': payback_threshold,
            'email': email_notifications,
            'slack_webhook': slack_webhook,
            'telegram_bot_token': telegram_bot_token,
            'telegram_chat_id': telegram_chat_id,
            'created_at': datetime.now().isoformat()
        }
        
        st.session_state['monitoring_settings'] = monitoring_settings
        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'metrics' in st.session_state and 'monitoring_settings' in st.session_state:
        st.markdown("### üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        metrics = st.session_state['metrics']
        settings = st.session_state['monitoring_settings']
        
        alerts = calculator.check_alerts(metrics, settings)
        
        if alerts:
            st.markdown("#### üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–ª–µ—Ä—Ç—ã:")
            
            for alert in alerts:
                if alert['type'] == 'critical':
                    st.error(f"üî¥ **{alert['title']}**: {alert['message']}")
                else:
                    st.warning(f"üü° **{alert['title']}**: {alert['message']}")
                
                st.markdown(f"üí° *{alert['recommendation']}*")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if settings.get('email') and st.button(f"üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email", key=f"email_{alert['title']}"):
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email
                        st.info("üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                
                with col2:
                    if settings.get('slack_webhook') and st.button(f"üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Slack", key=f"slack_{alert['title']}"):
                        success = calculator.send_slack_notification(
                            settings['slack_webhook'], 
                            f"{alert['title']}: {alert['message']}"
                        )
                        if success:
                            st.success("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Slack!")
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack")
                
                with col3:
                    if settings.get('telegram_bot_token') and st.button(f"üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram", key=f"tg_{alert['title']}"):
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
                        st.info("üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                
                st.markdown("---")
        
        else:
            st.success("‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ, –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç!")
    
    # –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤
    st.markdown("### üìà –°–∏–º—É–ª—è—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    if st.button("üé≠ –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"):
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
        test_scenarios = [
            {
                'name': '–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
                'ltv_cac': 3.2,
                'retention_drop': 0.05,
                'payback_period': 8
            },
            {
                'name': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ LTV/CAC',
                'ltv_cac': 0.8,
                'retention_drop': 0.15,
                'payback_period': 15
            },
            {
                'name': '–†–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ retention',
                'ltv_cac': 2.1,
                'retention_drop': 0.35,
                'payback_period': 6
            },
            {
                'name': '–î–æ–ª–≥–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å',
                'ltv_cac': 1.8,
                'retention_drop': 0.10,
                'payback_period': 18
            }
        ]
        
        for scenario in test_scenarios:
            st.markdown(f"#### üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            test_metrics = {
                'ltv_cac': scenario['ltv_cac'],
                'payback_period': scenario['payback_period'],
                'retention': pd.Series([1.0, 0.8, 0.8 - scenario['retention_drop']])
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
            test_alerts = calculator.check_alerts(
                test_metrics, 
                st.session_state.get('monitoring_settings', {
                    'ltv_cac_threshold': 1.0,
                    'retention_drop': 0.2,
                    'payback_threshold': 12
                })
            )
            
            if test_alerts:
                for alert in test_alerts:
                    if alert['type'] == 'critical':
                        st.error(f"üî¥ {alert['message']}")
                    else:
                        st.warning(f"üü° {alert['message']}")
            else:
                st.success("‚úÖ –ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç")
            
            st.markdown("---")

def benchmarks_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏."""
    st.markdown("## üèÜ –ë–µ–Ω—á–º–∞—Ä–∫–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏")
    
    st.markdown("""
    –°—Ä–∞–≤–Ω–∏—Ç–µ –≤–∞—à–∏ –º–µ—Ç—Ä–∏–∫–∏ —Å —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–Ω–¥—É—Å—Ç—Ä–∏—è–º.
    –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –≤–∞—à–∞ –º–æ–¥–µ–ª—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.
    """)
    
    # –í—ã–±–æ—Ä –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
    industry = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥—É—Å—Ç—Ä–∏—é:",
        list(calculator.industry_benchmarks.keys())
    )
    
    benchmark = calculator.industry_benchmarks[industry]
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
    st.markdown(f"### üìä –ë–µ–Ω—á–º–∞—Ä–∫–∏ –¥–ª—è –∏–Ω–¥—É—Å—Ç—Ä–∏–∏: {industry}")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("LTV/CAC", f"{benchmark['ltv_cac']:.1f}")
    
    with col2:
        st.metric("Lifetime", f"{benchmark['lifetime_months']} –º–µ—Å")
    
    with col3:
        st.metric("1-–π –º–µ—Å—è—Ü retention", f"{benchmark['month1_retention']:.0%}")
    
    with col4:
        st.metric("Churn Rate", f"{benchmark['churn_rate']:.1%}")
    
    with col5:
        st.metric("–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å", f"{benchmark['payback_months']} –º–µ—Å")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if 'metrics' in st.session_state:
        st.markdown("### üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        metrics = st.session_state['metrics']
        retention_data = st.session_state.get('retention_data', pd.Series())
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_data = {
            '–ú–µ—Ç—Ä–∏–∫–∞': ['LTV/CAC', 'Lifetime (–º–µ—Å)', '1-–π –º–µ—Å—è—Ü retention', '–°—Ä–µ–¥–Ω–∏–π churn rate'],
            '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ': [
                f"{metrics['ltv_cac']:.2f}",
                f"{metrics['lifetime']:.1f}",
                f"{retention_data.iloc[0] if len(retention_data) > 0 else 0:.0%}",
                f"{metrics['churn_rates'].mean():.1%}" if len(metrics['churn_rates']) > 0 else "N/A"
            ],
            '–ë–µ–Ω—á–º–∞—Ä–∫ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏': [
                f"{benchmark['ltv_cac']:.1f}",
                f"{benchmark['lifetime_months']}",
                f"{benchmark['month1_retention']:.0%}",
                f"{benchmark['churn_rate']:.1%}"
            ],
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': []
        }
        
        # –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        your_ltv_cac = metrics['ltv_cac']
        your_lifetime = metrics['lifetime']
        your_retention = retention_data.iloc[0] if len(retention_data) > 0 else 0
        your_churn = metrics['churn_rates'].mean() if len(metrics['churn_rates']) > 0 else 0
        
        deviations = [
            f"{((your_ltv_cac / benchmark['ltv_cac']) - 1) * 100:+.1f}%",
            f"{((your_lifetime / benchmark['lifetime_months']) - 1) * 100:+.1f}%",
            f"{((your_retention / benchmark['month1_retention']) - 1) * 100:+.1f}%" if your_retention > 0 else "N/A",
            f"{((your_churn / benchmark['churn_rate']) - 1) * 100:+.1f}%" if your_churn > 0 else "N/A"
        ]
        
        comparison_data['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'] = deviations
        
        comparison_df = pd.DataFrame(comparison_data)
        st.dataframe(comparison_df, use_container_width=True)
        
        # –†–∞–¥–∞—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        create_benchmark_radar_chart(metrics, benchmark, industry, retention_data)
        
        # –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.markdown("### üí° –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        recommendations = []
        
        if your_ltv_cac < benchmark['ltv_cac'] * 0.8:
            recommendations.append({
                'type': 'warning',
                'title': 'LTV/CAC –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏',
                'text': f"–í–∞—à LTV/CAC ({your_ltv_cac:.2f}) –Ω–∞ {abs(((your_ltv_cac / benchmark['ltv_cac']) - 1) * 100):.1f}% –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ",
                'action': '–§–æ–∫—É—Å –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ ARPPU –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ CAC'
            })
        elif your_ltv_cac > benchmark['ltv_cac'] * 1.2:
            recommendations.append({
                'type': 'success',
                'title': '–û—Ç–ª–∏—á–Ω—ã–π LTV/CAC',
                'text': f"–í–∞—à LTV/CAC –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –Ω–∞ {((your_ltv_cac / benchmark['ltv_cac']) - 1) * 100:.1f}%",
                'action': '–ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤'
            })
        
        if your_lifetime < benchmark['lifetime_months'] * 0.8:
            recommendations.append({
                'type': 'warning',
                'title': '–ù–∏–∑–∫–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤',
                'text': f"Lifetime –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –Ω–∞ {abs(((your_lifetime / benchmark['lifetime_months']) - 1) * 100):.1f}%",
                'action': '–£–ª—É—á—à–∏—Ç–µ retention —á–µ—Ä–µ–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
            })
        
        if your_retention > 0 and your_retention < benchmark['month1_retention'] * 0.8:
            recommendations.append({
                'type': 'warning',
                'title': '–ù–∏–∑–∫–∏–π retention –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞',
                'text': f"Retention –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞ {abs(((your_retention / benchmark['month1_retention']) - 1) * 100):.1f}%",
                'action': '–£–ª—É—á—à–∏—Ç–µ onboarding –∏ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç'
            })
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        for rec in recommendations:
            if rec['type'] == 'warning':
                st.warning(f"‚ö†Ô∏è **{rec['title']}**: {rec['text']}")
            else:
                st.success(f"‚úÖ **{rec['title']}**: {rec['text']}")
            
            st.markdown(f"üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec['action']}*")
            st.markdown("---")
        
        if not recommendations:
            st.success("üéâ –í–∞—à–∏ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏!")
    
    else:
        st.info("üëÜ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏—è–º
    st.markdown("### üìö –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏—è–º")
    
    industry_descriptions = {
        'E-commerce': {
            'description': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã',
            'challenges': ['–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è', '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã'],
            'opportunities': ['–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è', '–û–º–Ω–∏–∫–∞–Ω–∞–ª—å–Ω–æ—Å—Ç—å', '–ü–æ–¥–ø–∏—Å–∫–∏']
        },
        'SaaS B2B': {
            'description': '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞–∫ —É—Å–ª—É–≥–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
            'challenges': ['–î–ª–∏–Ω–Ω—ã–π sales cycle', '–í—ã—Å–æ–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥'],
            'opportunities': ['–í—ã—Å–æ–∫–∏–π LTV', '–ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π –¥–æ—Ö–æ–¥', '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å']
        },
        'Mobile Games': {
            'description': '–ú–æ–±–∏–ª—å–Ω—ã–µ –∏–≥—Ä—ã —Å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π',
            'challenges': ['–í—ã—Å–æ–∫–∏–π churn', '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ'],
            'opportunities': ['–í–∏—Ä—É—Å–Ω–æ—Å—Ç—å', 'In-app –ø–æ–∫—É–ø–∫–∏', '–†–µ–∫–ª–∞–º–∞']
        },
        '–§–∏–Ω—Ç–µ—Ö': {
            'description': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —É—Å–ª—É–≥–∏',
            'challenges': ['–†–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', '–î–æ–≤–µ—Ä–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'],
            'opportunities': ['–í—ã—Å–æ–∫–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å', 'Cross-selling', '–î–∞–Ω–Ω—ã–µ']
        },
        'EdTech': {
            'description': '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'challenges': ['–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'],
            'opportunities': ['–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º']
        },
        'Delivery': {
            'description': '–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã –∏ —Ç–æ–≤–∞—Ä–æ–≤',
            'challenges': ['–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –ø–æ —Ü–µ–Ω–µ', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã'],
            'opportunities': ['–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏']
        }
    }
    
    if industry in industry_descriptions:
        info = industry_descriptions[industry]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ**: {info['description']}")
            
            st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã:**")
            for challenge in info['challenges']:
                st.markdown(f"‚Ä¢ {challenge}")
        
        with col2:
            st.markdown("**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞:**")
            for opportunity in info['opportunities']:
                st.markdown(f"‚Ä¢ {opportunity}")

def create_benchmark_radar_chart(metrics, benchmark, industry, retention_data):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–¥–∞—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏."""
    try:
        categories = ['LTV/CAC', 'Lifetime', 'Retention 1–º', '–ù–∏–∑–∫–∏–π Churn']
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        your_values = [
            min(metrics['ltv_cac'] / benchmark['ltv_cac'], 2),  # –º–∞–∫—Å 2x –æ—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞
            min(metrics['lifetime'] / benchmark['lifetime_months'], 2),
            min((retention_data.iloc[0] if len(retention_data) > 0 else 0) / benchmark['month1_retention'], 2),
            min((1 - metrics['churn_rates'].mean()) / (1 - benchmark['churn_rate']), 2) if len(metrics['churn_rates']) > 0 else 0
        ]
        
        benchmark_values = [1, 1, 1, 1]  # –±–µ–Ω—á–º–∞—Ä–∫ = 1
        
        fig = go.Figure()
        
        # –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
        fig.add_trace(go.Scatterpolar(
            r=your_values + [your_values[0]],  # –∑–∞–º—ã–∫–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            theta=categories + [categories[0]],
            fill='toself',
            name='–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ',
            line_color='#667eea'
        ))
        
        # –ë–µ–Ω—á–º–∞—Ä–∫
        fig.add_trace(go.Scatterpolar(
            r=benchmark_values + [benchmark_values[0]],
            theta=categories + [categories[0]],
            fill='toself',
            name=f'–ë–µ–Ω—á–º–∞—Ä–∫ {industry}',
            line_color='#ff7f0e',
            opacity=0.6
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 2]
                )
            ),
            showlegend=True,
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–¥–∞—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–¥–∞—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'app_initialized' not in st.session_state:
        st.session_state.app_initialized = True
        st.session_state.version = "2.0.0"
        st.session_state.last_updated = datetime.now()
    
    # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø–æ–¥–≤–∞–ª–µ
    with st.expander("üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏"):
        st.markdown("""
        ### üìñ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
        
        - **Lifetime** ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ (—Å—É–º–º–∞ retention –ø–æ –º–µ—Å—è—Ü–∞–º)
        - **LTV** (Lifetime Value) ‚Äî –æ–±—â–∏–π –¥–æ—Ö–æ–¥ —Å –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –∂–∏–∑–Ω–∏
        - **CAC** (Customer Acquisition Cost) ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        - **ARPPU** (Average Revenue Per Paying User) ‚Äî —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –ø–ª–∞—Ç—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - **Retention** ‚Äî –¥–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        - **Churn Rate** ‚Äî –¥–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        
        ### üßÆ –§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞
        
        ```
        Lifetime = Œ£(Retention –ø–æ –º–µ—Å—è—Ü–∞–º)
        LTV = ARPPU √ó Lifetime
        LTV/CAC = LTV √∑ CAC
        ROI = (LTV/CAC - 1) √ó 100%
        Churn Rate = 1 - (Retention_—Ç–µ–∫—É—â–∏–π / Retention_–ø—Ä–µ–¥—ã–¥—É—â–∏–π)
        ```
        
        ### üéØ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è LTV/CAC
        
        - **< 1.0** ‚Äî –£–±—ã—Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å (—Ç—Ä–∞—Ç–∏–º –±–æ–ª—å—à–µ, —á–µ–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º)
        - **1.0-2.0** ‚Äî –û–∫—É–ø–∞–µ—Ç—Å—è, –Ω–æ –µ—Å—Ç—å —Ä–∏—Å–∫–∏
        - **2.0-3.0** ‚Äî –ó–¥–æ—Ä–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–æ—Å—Ç–∞
        - **> 3.0** ‚Äî –û—Ç–ª–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        
        ### üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        
        **–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è LTV:**
        - –£–ª—É—á—à–µ–Ω–∏–µ retention (–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ —Ñ–∏—á–∏, engagement, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è)
        - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ ARPPU (upsell, cross-sell, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è)
        - –°–Ω–∏–∂–µ–Ω–∏–µ churn rate (—É–ª—É—á—à–µ–Ω–∏–µ customer success)
        
        **–î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è CAC:**
        - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞
        - –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ª–µ–Ω–¥–∏–Ω–≥–æ–≤ –∏ –≤–æ—Ä–æ–Ω–∫–∏
        - –†–∞–∑–≤–∏—Ç–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ (SEO, –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥)
        - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        
        ### ü§ñ ML –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è retention.
        –ê–ª–≥–æ—Ä–∏—Ç–º —É—á–∏—Ç—ã–≤–∞–µ—Ç:
        - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–¥ retention
        - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–±—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        - –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        
        ### üè≠ –ë–µ–Ω—á–º–∞—Ä–∫–∏ –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏—è–º
        
        –î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –∏ –æ—Ç—á–µ—Ç–∞—Ö:
        - **E-commerce**: —Å—Ä–µ–¥–Ω–∏–π LTV/CAC = 3.0, retention 1–º = 25%
        - **SaaS B2B**: —Å—Ä–µ–¥–Ω–∏–π LTV/CAC = 3.5, retention 1–º = 85%
        - **Mobile Games**: —Å—Ä–µ–¥–Ω–∏–π LTV/CAC = 1.5, retention 1–º = 40%
        - **–§–∏–Ω—Ç–µ—Ö**: —Å—Ä–µ–¥–Ω–∏–π LTV/CAC = 4.0, retention 1–º = 70%
        - **EdTech**: —Å—Ä–µ–¥–Ω–∏–π LTV/CAC = 2.8, retention 1–º = 60%
        - **Delivery**: —Å—Ä–µ–¥–Ω–∏–π LTV/CAC = 2.2, retention 1–º = 35%
        
        ### üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        **Google Sheets**: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Å—ã–ª–∫–µ.
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ:
        - –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏–ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ
        - –ö–æ–ª–æ–Ω–∫–∞ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ retention (–≤ % –∏–ª–∏ –¥–æ–ª—è—Ö)
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        
        **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∞–ª–µ—Ä—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤:
        - Email
        - Slack (—á–µ—Ä–µ–∑ Webhook)
        - Telegram (—á–µ—Ä–µ–∑ Bot API)
        
        ### üé≠ –°—Ü–µ–Ω–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å—Ü–µ–Ω–∞—Ä–∏–∏:
        - **–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π**: +25% ARPPU, +20% retention, -15% CAC
        - **–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π**: +8% ARPPU, +8% retention, +2% CAC
        - **–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π**: -8% ARPPU, -12% retention, +15% CAC
        - **–ö—Ä–∏–∑–∏—Å–Ω—ã–π**: -15% ARPPU, -25% retention, +30% CAC
        
        ### üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        
        **Excel –æ—Ç—á–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç:**
        - –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        - –ü–æ–º–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        - ML –ø—Ä–æ–≥–Ω–æ–∑
        - –ê–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
        - –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        
        **JSON —Ñ–æ—Ä–º–∞—Ç** –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
        """)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.sidebar.markdown(f"**–í–µ—Ä—Å–∏—è**: {st.session_state.version}")
    st.sidebar.markdown(f"**–û–±–Ω–æ–≤–ª–µ–Ω–æ**: {st.session_state.last_updated.strftime('%Y-%m-%d')}")
    st.sidebar.markdown("**–ê–≤—Ç–æ—Ä**: Lifetime Calculator Pro")
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    with st.sidebar.expander("üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"):
        feedback_type = st.selectbox("–¢–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:", 
                                   ["üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üêõ –û—à–∏–±–∫–∞", "‚ùì –í–æ–ø—Ä–æ—Å", "üëç –ü–æ—Ö–≤–∞–ª–∞"])
        feedback_text = st.text_area("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        
        if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å") and feedback_text:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∏–¥–±–µ–∫–∞
            st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    main()
